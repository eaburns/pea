Import "assert"
Import "basic"
import "print"

// An absolute point in time.
// A point can represent absolute points in time
// with nanosecond precision within the range
// [-292277022657-01-27T08:29:52+00:00, 292277026596-12-04T15:30:07.99999999+00:00]
Type point ([.d duration])

// Epoch is the time point representing
// January 1, year 1, 00:00:00.000000000 UTC.
// Other time points can be created by adding or subtracting durations from epoch.
Const epoch := point :: [.d zero_duration]

// Positive infinity time point.
Const infinite_point := point :: [.d infinite_duration]

// Negative infinity time point.
Const negative_infinite_point := point :: [.d -infinite_duration]

// The minimum representable, finite time point.
Const min_point := point :: [.d min_duration]

// The maximum representable, finite time point.
Const max_point := point :: [.d max_duration]

// Returns the time point t+d or respectively t-d.
Func +(t point, d duration) point { return: [.d t.d + d] }
Func -(t point, d duration) point { return: [.d t.d - d] }

// Returns the duration between two time points.
Func -(a point, b point) duration { return: a.d - b.d }

test point_subtraction {
	assert: (epoch + second) - epoch equals: second,
	assert: epoch - (epoch + second) equals: -second,
}

// Returns the result of comparing a = b, a != b, a < b, a <= b, a > b, or a >= b.
Func =(a point, b point) bool { return: a.d = b.d }
Func <(a point, b point) bool { return: a.d < b.d }
Func <=(a point, b point) bool { return: a.d <= b.d }
Func >(a point, b point) bool { return: a.d > b.d }
Func >=(a point, b point) bool { return: a.d >= b.d }

test point_comparison {
	assert_true: epoch = epoch,
	assert_true: epoch+second = epoch+second,
	assert_false: epoch+second = epoch-second,

	assert_false: epoch != epoch,
	assert_false: epoch+second != epoch+second,
	assert_true: epoch+second != epoch-second,

	assert_false: epoch < epoch,
	assert_false: epoch+second < epoch+second,
	assert_true: epoch < epoch+second,
	assert_true: epoch-second < epoch,

	assert_true: epoch <= epoch,
	assert_true: epoch+second <= epoch+second,
	assert_true: epoch <= epoch+second,
	assert_true: epoch-second <= epoch,
	assert_false: epoch+second <= epoch,
	assert_false: epoch <= epoch-second,

	assert_false: epoch > epoch,
	assert_false: epoch+second > epoch+second,
	assert_false: epoch > epoch+second,
	assert_false: epoch-second > epoch,
	assert_true: epoch+second > epoch,
	assert_true: epoch > epoch-second,

	assert_true: epoch >= epoch,
	assert_true: epoch+second >= epoch+second,
	assert_false: epoch >= epoch+second,
	assert_false: epoch-second >= epoch,
	assert_false: epoch >= epoch+second,
	assert_false: epoch-second >= epoch,
}

// point doesn't implement a +=(printer, point)printer function.
// Instead, you can print it as a string by converting it to a duration from the epoch.
// Here are some examples.
test point_as_string {
	t := epoch + 365*24*hour + 1*second,

	// Human-readable duration since the epoch.
	assert: print#string(t - epoch) equals: "8760h1s",

	// Seconds from epoch — "Unix seconds"
	assert: print#string(int64 :: (t - epoch) / second) equals: "31536001",

	// Miliseconds from epoch — "Unix milliseconds"
	assert: print#string(int64 :: (t - epoch) / millisecond) equals: "31536001000",

	// and so-forth…
}
