Import "basic"

// An absolute point in time.
// The current implementation supports nanosecond precision.
Type point := _point
type _point [.ns int64]

// Epoch is the time point representing
// January 1, year 1, 00:00:00.000000000 UTC.
// Other time points can be created by adding or subtracting durations from epoch.
Const epoch := point :: [.ns 0]

// Returns the time point t+d or respectively t-d.
Func +(t point, d duration) point { return: [.ns t.ns + d.ns] }
Func -(t point, d duration) point { return: [.ns t.ns - d.ns] }

// Returns the duration between two time points.
Func -(a point, b point) duration { return: [.ns a.ns - b.ns] }

test point_subtraction {
	assert: (epoch + second) - epoch equals: second,
	assert: epoch - (epoch + second) equals: -second,
}

// Returns the result of comparing a = b, a != b, a < b, a <= b, a > b, or a >= b.
Func =(a point, b point) bool { return: a.ns = b.ns }
Func !=(a point, b point) bool { return: a.ns != b.ns }
Func <(a point, b point) bool { return: a.ns < b.ns }
Func <=(a point, b point) bool { return: a.ns <= b.ns }
Func >(a point, b point) bool { return: a.ns > b.ns }
Func >=(a point, b point) bool { return: a.ns >= b.ns }

test point_comparison {
	assert_true: epoch = epoch,
	assert_true: epoch+second = epoch+second,
	assert_false: epoch+second = epoch-second,

	assert_false: epoch != epoch,
	assert_false: epoch+second != epoch+second,
	assert_true: epoch+second != epoch-second,

	assert_false: epoch < epoch,
	assert_false: epoch+second < epoch+second,
	assert_true: epoch < epoch+second,
	assert_true: epoch-second < epoch,

	assert_true: epoch <= epoch,
	assert_true: epoch+second <= epoch+second,
	assert_true: epoch <= epoch+second,
	assert_true: epoch-second <= epoch,
	assert_false: epoch+second <= epoch,
	assert_false: epoch <= epoch-second,

	assert_false: epoch > epoch,
	assert_false: epoch+second > epoch+second,
	assert_false: epoch > epoch+second,
	assert_false: epoch-second > epoch,
	assert_true: epoch+second > epoch,
	assert_true: epoch > epoch-second,

	assert_true: epoch >= epoch,
	assert_true: epoch+second >= epoch+second,
	assert_false: epoch >= epoch+second,
	assert_false: epoch-second >= epoch,
	assert_false: epoch >= epoch+second,
	assert_false: epoch-second >= epoch,
}

// point doesn't implement a +=(printer, point)printer function.
// Instead, you can print it as a string by converting it to a duration from the epoch.
// Here are some examples.
test point_as_string {
	t := epoch + 365*24*hour + 1*second,

	// Human-readable duration since the epoch.
	assert: print_string(t - epoch) equals: "8760h1s",

	// Seconds from epoch — "Unix seconds"
	assert: print_string(int64 :: (t - epoch) / second) equals: "31536001",

	// Miliseconds from epoch — "Unix milliseconds"
	assert: print_string(int64 :: (t - epoch) / millisecond) equals: "31536001000",

	// and so-forth…
}
