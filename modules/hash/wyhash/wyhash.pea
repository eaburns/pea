/*
The wyhash hash algorithm.

The main repo for wyhash is https://github.com/wangyi-fudan/wyhash.
This implementation is based on the abseil implementation from https://github.com/abseil/abseil-cpp/blob/master/absl/hash/internal/wyhash.cc.
The abseil implementation has the following notice:
	Copyright 2020 The Abseil Authors

	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	    https://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/
Import "basic"

const salt := [uint64] :: [
	// TODO: fix hex constants when supported correctly by llvm backend.
	/* // absl constants
	2611923443488327891, // 0x243F6A8885A308D3,
	1376283091369227076, // 0x13198A2E03707344,
	11820040416388919760, // 0xA4093822299F31D0,
	589684135938649225, // 0x082EFA98EC4E6C89,
	4983270260364809079, // 0x452821E638D01377,
	*/
	// default constants
	11562461410679940143, // 0xa0761d6478bd642f
	16646288086500911323, // 0xe7037ed1a0b428db
	10285213230658275043, // 0x8ebc6af09c88c6e3
	6384245875588680899, // 0x589965cc75374cc3
	2129725606500045391, // 0x1d8e4e27c47d124f
]

Func hash(seed uint64, data T) uint64 :
	[](T, int) uint8,
	[](T, int, int)T,
	.length(T) int,
{
	len0 := uint64 :: data.length,
	state := seed ^ salt[0],
	if: data.length > 64 then: {
		state2 := state,
		do: {
			a := consume64(data),
			b := consume64(data),
			c := consume64(data),
			d := consume64(data),
			e := consume64(data),
			f := consume64(data),
			g := consume64(data),
			h := consume64(data),
			cs0 := mix(a ^ salt[1], b ^ state),
			cs1 := mix(c ^ salt[2], d ^ state),
			state := cs0 ^ cs1,
			ds0 := mix(e ^ salt[3], f ^ state2),
			ds1 := mix(g ^ salt[4], h ^ state2),
			state2 := ds0 ^ ds1,
		} while: {data.length > 64},
		state := state ^ state2,
	},
	while: {data.length > 16} do: {
		a := consume64(data),
		b := consume64(data),
		state := mix(a ^ salt[1], b ^ state),
	},
	a := uint64 :: 0,
	b := uint64 :: 0,
	if: data.length > 8 then: {
		a := load64(data),
		b := load64(data[data.length - 8, data.length]),
	} else: {
		if: data.length > 3 then: {
			a := load32(data),
			b := load32(data[data.length - 4, data.length]),
		} else: {
			if: data.length > 0 then: {
				a := (uint64 :: data[0]) << 16 |
					(uint64 :: data[data.length >> 1]) << 8 |
					(uint64 :: data[data.length - 1]),
				b := 0,
			} else: {
				a := 0,
				b := 0,
			}
		}
	},
	w := mix(a ^ salt[1], b ^ state),
	z := salt[1] ^ len0,
	return: mix(w, z)
}

test hash {
	// Test values are from https://github.com/abseil/abseil-cpp/blob/master/absl/hash/internal/wyhash_test.cc

	assert: hash(0, "") equals: 4808886099364463827,
	assert: hash(0, [uint8] :: []) equals: 4808886099364463827,
	assert: hash(0, "   ") equals: 1686201463024549249,
	assert: hash(0, [uint8] :: [' ', ' ', ' ']) equals: 1686201463024549249,
	assert: hash(0, "aaaa") equals: 6646112255271966632,
	assert: hash(0, [uint8] :: ['a', 'a', 'a', 'a']) equals: 6646112255271966632,
	assert: hash(0, "third_party|wyhash|64") equals: 3702018632387611330,
	assert: hash(0, "AbCdEfGhIjKlMnOpQrStUvWxYz0123456789AbCdEfGhIjKlMnOpQrStUvWxYz0123456789AbCdEfGhIjKlMnOpQrStUvWxYz0123456789AbCdEfGhIjKlMnOpQrStUvWxYz0123456789AbCdEfGhIjKlMnOpQrStUvWxYz0123456789AbCdEfGhIjKlMnOpQrStUvWxYz0123456789AbCdEfGhIjKlMnOpQrStUvWxYz0123456789AbCdEfGhIjKlMnOpQrStUvWxYz0123456789") equals: 9245411362605796064,
}

func load32(data T) uint64 : [](T, int) uint8 {
	return: (uint64 :: data[0]) |
		(uint64 :: data[1]) << 8 |
		(uint64 :: data[2]) << 16 |
		(uint64 :: data[3]) << 24
}

func load64(data T) uint64 : [](T, int) uint8 {
	return: (uint64 :: data[0]) |
		(uint64 :: data[1]) << 8 |
		(uint64 :: data[2]) << 16 |
		(uint64 :: data[3]) << 24 |
		(uint64 :: data[4]) << 32 |
		(uint64 :: data[5]) << 40 |
		(uint64 :: data[6]) << 48 |
		(uint64 :: data[7]) << 56
}

func consume64(data &T) uint64 :
	[](T, int) uint8,
	[](T, int, int)T,
	.length(T) int,
{
	u := load64(data),
	data := data[8, data.length],
	return: u
}

func mix(a uint64, b uint64) uint64 {
	c := mul64to128(a, b),
	return: c.lo ^ c.hi
}

/*
mul64to128 is from the implementation in xxHash3 at https://github.com/Cyan4973/xxHash/blob/8e5fdcbe70687573265b7154515567ee7ca0645c/xxh3.h#L292,
which has the following notice:
	Copyright (C) 2019-present, Yann Collet.
	BSD 2-Clause License (http://www.opensource.org/licenses/bsd-license.php)
	You can contact the author at :
	- xxHash source repository : https://github.com/Cyan4973/xxHash
*/
func mul64to128(a uint64, b uint64) [.hi uint64, .lo uint64] {
	// TODO: use 0xFFFFFFFF literal instead of FFFFFFFF variable.
	// LLVM interprets 0xFFFFFFFF as a double literal.
	// We need to change the llvm backend to emit it in base 10.
	FFFFFFFF := uint64 :: 4294967295,
	a_lo := a & FFFFFFFF,
	a_hi := a >> 32,
	b_lo := b & FFFFFFFF,
	b_hi := b >> 32,
	lo_lo := a_lo * b_lo,
	hi_lo := a_hi * b_lo,
	lo_hi := a_lo * b_hi,
	hi_hi := a_hi * b_hi,
	cross := (lo_lo >> 32) + (hi_lo & FFFFFFFF) + lo_hi,
	upper := (hi_lo >> 32) + (cross >> 32) + hi_hi,
	lower := (cross << 32) | (lo_lo & FFFFFFFF),
	return: [.hi upper, .lo lower]
}

func =(a [.hi uint64, .lo uint64], b [.hi uint64, .lo uint64]) bool {
	return: a.hi = b.hi && { a.lo = b.lo }
}

func +=(p printer, x [.hi uint64, .lo uint64]) printer {
	return: p += "[.hi " += x.hi += ", .lo " += x.lo += "]"
}

test mul64to128 {
	assert: mul64to128(0, 0) equals: [.hi 0, .lo 0],
	assert: mul64to128(0, 1) equals: [.hi 0, .lo 0],
	assert: mul64to128(1, 0) equals: [.hi 0, .lo 0],
	assert: mul64to128(1, 1) equals: [.hi 0, .lo 1],
	assert: mul64to128(1, 5) equals: [.hi 0, .lo 5],
	assert: mul64to128(5, 1) equals: [.hi 0, .lo 5],
	assert: mul64to128(18446744073709551615, 1) equals: [.hi 0, .lo 18446744073709551615],
	assert: mul64to128(1, 18446744073709551615) equals: [.hi 0, .lo 18446744073709551615],
	assert: mul64to128(2, 18446744073709551615) equals: [.hi 1, .lo 18446744073709551614],
	assert: mul64to128(18446744073709551615, 2) equals: [.hi 1, .lo 18446744073709551614],
	assert: mul64to128(18446744073709551615, 100) equals: [.hi 99, .lo 18446744073709551516],
	assert: mul64to128(100, 18446744073709551615) equals: [.hi 99, .lo 18446744073709551516],
	assert: mul64to128(18446744073709551615, 18446744073709551615) equals: [.hi 18446744073709551614, .lo 1],
}