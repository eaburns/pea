Import "basic"
import "print"

// Panics of a is not equal to b by the = function.
Func assert:equals:(a T, b T) : =(T, T) bool, +=(print#printer, T)print#printer {
	if: !(a = b) then: {
		panic(print#string(a, " != ", b, " expected equal"))
	}
}

// Panics if o is the some? case.
Func assert_none:(o T option) : +=(print#printer, T)print#printer {
	if: o some: (t T) {
		panic(print#string("got ", o, " wanted none()"))
	}
}

// Panics of o is the none? case
// or if the some? case value of o
// is not equal to b.
Func assert:some:(o T option, b T) :
	+=(print#printer, T)print#printer,
	=(T, T) bool,
{
	if: o some: (a T) {
		if: !(a = b) then: {
			panic(print#string(o, " != some(", b, ")"))
		}
	} none: {
		panic(print#string(o, " != some(", b, ")"))
	}
}

// Panics if o is not the some? case.
Func assert_some:(o T option) : +=(print#printer, T)print#printer {
	if: o none: {
		panic(print#string(o, " != some(...)"))
	}
}

// Panics if o is the some? case.
Func assert_ok:(o error option) {
	if: o error: (e){
		panic(print#string("got error ", e, ", wanted OK"))
	}
}

// Panics if o is the error? case.
Func assert_ok:(o T or_error) {
	if: o error: (e){
		panic(print#string("got error ", e, ", wanted OK"))
	}
}

// Panics if o is the none? case.
Func assert_error:(o error option) {
	if: o ok: {
		panic(print#string("got OK, wanted an error"))
	}
}

// Panics if o is the ok? case.
Func assert_error:(o T or_error) : +=(print#printer, T)print#printer {
	if: o ok: (t){
		panic(print#string("got ", t, ", wanted an error"))
	}
}

// Panics if o is the none? case
// or if the some? case value's message
// is not equal to msg.
Func assert:error:(o error option, msg string) {
	if: o ok: {
		panic(print#string("got OK, wanted an error"))
	} error: (e){
		if: message(e) != msg then: {
			panic(print#string("got error ", e, ", wanted ", msg))
		}
	}
}

// Panics if o is the ok? case
// or if the error? case value's message
// is not equal to msg.
Func assert:error:(o T or_error, msg string) : +=(print#printer, T)print#printer {
	if: o ok: (t){
		panic(print#string("got ", t, ", wanted an error"))
	} error: (e){
		if: message(e) != msg then: {
			panic(print#string("got error ", e, ", wanted ", msg))
		}
	}
}

// Panics if the the number of elements in c is not want.length,
// or if for any i, the ith element in the order of for:each:
// is not equal to the ith element of want.
Func assert:elements:(c C, want [T]) :
	for:each:(C, (T){}),
	=(T,T)bool,
	+=(print#printer, T)print#printer,
{
	i := 0,
	array := [T] :: [],
	for: c each: (t) {
		if: i >= array.length then: {
			array2 := [T] :: new((array.length + 1) * 2, t),
			for: 0 to: array.length - 1 do: (j) {
				array2[j] := array[j]
			},
			array := array2,
		},
		array[i] := t,
		++i,
	},
	got := array[0, i],
	if: got != want then: {
		panic(print#string("got ", got, ", wanted ", want))
	}
}
