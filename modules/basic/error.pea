Type error := _error

type _error [.msg string]

Func new(msg string) error {
	return: [.msg msg]
}

Func message(err error) string {
	return: err.msg
}

Func +=(p printer, err error) printer {
	return: p += err.msg,
}

Type T or_error [error? error, ok? T]

Func ok(t T) T or_error {
	return: [ok? t]
}

Func error(err error) T or_error {
	return: [error? err]
}

Func error(msg string) T or_error {
	return: [error? new(msg)]
}

Func must(o T or_error) T {
	return: o ok? (t T){ t } error? (e){ panic(print_string(e)) }
}

Func error?(o T or_error, f (error){T}) T {
	return: o error? f ok? (t){ t }
}

test error_question {
	assert: (int or_error :: ok(1)) error? (e) {5} equals: 1,
	assert: (int or_error :: error("foo")) error? (e) {5} equals: 5,
}

Func if:ok:(o T or_error, k (T){}) {
	o ok? k error? (_){}
}

Func if:error:(o T or_error, e (error){}) {
	o ok? (_ T){} error? e
}

Func if:ok:error:(o T or_error, k (T){}, e (error){}) {
	o ok? k error? e
}

Func if:error:ok:(o T or_error, e (error){}, k (T){}) {
	o ok? k error? e
}

Func +=(p printer, t_or T or_error) printer : +=(printer, T)printer {
	return: t_or ok? (t T) {
		p += "ok(" += t += ")"
	} error? (e) {
		p += "error(" += e += ")"
	}
}

test print_or_error {
	assert: print_string(int or_error :: error("oops")) equals: "error(oops)",
	assert: print_string(ok(1)) equals: "ok(1)",
	assert: print_string(ok("Hello, World!")) equals: "ok(Hello, World!)",
}

Func ok() error option {
	return: none()
}

Func error(e error) error option {
	return: some(e)
}

Func error(msg string) error option {
	return: some(new(msg))
}

Func error?(o error option, e (error){}) {
	if: o some: e
}

Func must(o error option) {
	if: o some: (e){ panic(print_string(e)) }
}

Func if:ok:(o error option, k (){}) {
	if: o none: k
}

Func if:error:(o error option, e (error){}) {
	if: o some: e
}

Func if:ok:error:(o error option, k (){}, e (error){}) {
	if: o some: e none: k
}

Func if:error:ok:(o error option, e (error){}, k (){}) {
	if: o some: e none: k
}