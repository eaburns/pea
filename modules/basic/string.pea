// Returns whether two strings are equal.
// Two strings are equal if the have the same length,
// and for every index i, the corresponding elements are =.
Func =(a string, b string) bool {
	if: a.length != b.length then: {
		return: false
	},
	for: 0 to: a.length - 1 do: (i) {
		if: a[i] != b[i] then: {
			return: false
		}
	},
	return: true
}

test string_equal {
	assert_true: "" = "",
	assert_true: "a" = "a",
	assert_true: "aaa" = "aaa",
	assert_true: "abcdef" = "abcdef",
	assert_true: "こんにちは" = "こんにちは",

	assert_false: "" = "a",
	assert_false: "a" = "",
	assert_false: "aaa" = "aa",
	assert_false: "aaa" = "aaaa",
	assert_false: "abc" = "cba",
	assert_false: "こんにちは" = "今日は",
}

// Returns whether two strings are not equal.
// Two strings are not equal if the = function returns false for the strings.
Func !=(a string, b string) bool {
	return: !(a = b)
}

test string_not_equal {
	assert_false: "" != "",
	assert_false: "a" != "a",
	assert_false: "aaa" != "aaa",
	assert_false: "abcdef" != "abcdef",
	assert_false: "こんにちは" != "こんにちは",

	assert_true: "" != "a",
	assert_true: "a" != "",
	assert_true: "aaa" != "aa",
	assert_true: "aaa" != "aaaa",
	assert_true: "abc" != "cba",
	assert_true: "こんにちは" != "今日は",
}

// Returns whether a string is less than another.
// Less is determined lexically: string a is less than b if,
// * for some 0 ≤ i < a.length, a[i] < b[i], and for all 0 ≤ j < i, a[j] = b[j],
// * or for all 0 ≤ i < a.length, a[i] = b[i] and a.length < b.length.
Func <(a string, b string) bool {
	for: 0 to: a.length - 1 do: (i) {
		if: i >= b.length then: {
			return: false
		},
		if: a[i] != b[i] then: {
			return: a[i] < b[i]
		}
	},
	return: a.length < b.length
}

test string_less {
	assert_false: "" < "",
	assert_false: "a" < "a",
	assert_false: "ab" < "a",
	assert_false: "z" < "a",

	assert_true: "" < "a",
	assert_true: "a" < "b",
	assert_true: "a" < "aa",
	assert_true: "foo bar" < "zoo bar",
}

// Returns the concatenation of two strings.
Func +(a string, b string) string {
	if: a.length = 0 then: {
		return: b
	},
	if: b.length = 0 then: {
		return: a
	},
	c := [uint8] :: new(a.length + b.length, uint8 :: 0),
	for: 0 to: a.length - 1 do: (i) {
		c[i] := a[i],
	},
	j := a.length,
	for: 0 to: b.length - 1 do: (i) {
		c[j] := b[i],
		j := j + 1,
	},
	return: string :: c
}

test string_plus {
	assert_true: "" + "" = "",
	assert_true: "" + "a" = "a",
	assert_true: "a" + "" = "a",
	assert_true: "a" + "a" = "aa",
	assert_true: "a" + "b" = "ab",
	assert_true: "abc" + "def" = "abcdef",
	assert_true: "こんにち" + "は" = "こんにちは",
}

// Adds the string to the printer and returns the printer.
Func +=(p printer, s string) printer {
	add_string(p, s),
	return: p
}
