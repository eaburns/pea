// Returns a new array of length n where each element 0 ≤ i < n has the value f(i).
Func new(n int, f (int){T}) [T] {
	if: n < 0 then: {
		panic("negative new array size")
	},
	if: n = 0 then: {
		return: []
	},
	a := new(n, f(0)),
	for: 1 to: n - 1 do: (i){
		a[i] := f(i)
	},
	return: a
}

test array_new_func {
	a := [int] :: new(0, (_ int){ 1 }),
	assert_true: a.length = 0,

	a := [int] :: new(1, (_ int){ 1 }),
	assert_true: a.length = 1,
	assert_true: a[0] = 1,

	a := [int] :: new(3, (_ int){ 1 }),
	assert_true: a.length = 3,
	assert_true: a[0] = 1,
	assert_true: a[1] = 1,
	assert_true: a[2] = 1,

	a := [int] :: new(3, (i int){ i }),
	assert_true: a.length = 3,
	assert_true: a[0] = 0,
	assert_true: a[1] = 1,
	assert_true: a[2] = 2,

	a := [int] :: new(3, (i int){ -1 - i }),
	assert_true: a.length = 3,
	assert_true: a[0] = -1,
	assert_true: a[1] = -2,
	assert_true: a[2] = -3
}

// Returns whether two arrays are equal.
// Two arrays are equal if the have the same length,
// and for every index i, the corresponding elements are =.
Func =(a [T], b [T]) bool : { =(T, T)bool } {
	if: a.length != b.length then: {
		return: false
	},
	for: 0 to: a.length - 1 do: (i){
		if: !(a[i] = b[i]) then: {
			return: false
		}
	},
	return: true
}

test array_equal {
	empty := [int] :: [],
	assert_true: empty = empty,
	assert_true: [1] = [1],
	assert_true: [1, 2, 3] = [1, 2, 3],

	assert_false: empty = [1],
	assert_false: [1] = empty,
	assert_false: [1] = [1, 2],
	assert_false: [1, 2] = [1],
	assert_false: [1, 2, 3] = [4, 2, 3],
	assert_false: [1, 2, 3] = [1, 4, 3],
	assert_false: [1, 2, 3] = [1, 2, 4]
}

// Returns whether an array is less than another.
// Less is determined lexically: array a is less than b if,
// * for some 0 ≤ i < a.length, a[i] < b[i], and for all 0 ≤ j < i, a[j] = b[j],
// * or for all 0 ≤ i < a.length, a[i] = b[i] and a.length < b.length.
Func <(a [T], b [T]) bool : { <(T, T)bool } {
	for: 0 to: a.length - 1 do: (i){
		if: i >= b.length then: {
			return: false
		},
		if: a[i] < b[i] then: {
			return: true
		},
		if: b[i] < a[i] then: {
			return: false
		}
	},
	return: a.length < b.length
}

test array_less {
	assert_false: ([int] :: []) < ([int] :: []),
	assert_false: [1] < [1],
	assert_false: [1, 2] < [1],
	assert_false: [2] < [1],

	assert_true: ([int] :: []) < [1],
	assert_true: [1] < [2],
	assert_true: [1] < [1, 1],
	assert_true: [1, 5, 6] < [1, 7, 8]
}

// Returns whether an array is greater than another.
// Greater is determined lexically: array a is greater than b if,
// * for some 0 ≤ i < a.length, a[i] > b[i], and for all 0 ≤ j < i, a[j] = b[j],
// * or for all 0 ≤ i < a.length, a[i] = b[i] and a.length > b.length.
Func >(a [T], b [T]) bool : { >(T, T)bool } {
	for: 0 to: a.length - 1 do: (i){
		if: i >= b.length then: {
			return: true
		},
		if: a[i] > b[i] then: {
			return: true
		},
		if: b[i] > a[i] then: {
			return: false
		}
	},
	return: a.length > b.length
}

test array_greater {
	assert_false: ([int] :: []) > ([int] :: []),
	assert_false: [1] > [1],
	assert_false: [1] > [1, 2],
	assert_false: [1] > [2],

	assert_true: [1] > ([int] :: []),
	assert_true: [2] > [1],
	assert_true: [1, 1] > [1],
	assert_true: [1, 7, 8] > [1, 5, 6]
}

// Returns whether an array is < or = to another.
Func <=(a [T], b [T]) bool : { <(T, T)bool, =(T, T)bool } {
	return: a < b || { a = b }
}

// Returns whether an array is > or = to another.
Func >=(a [T], b [T]) bool : { >(T, T)bool, =(T, T)bool } {
	return: a > b || { a = b }
}

// Sets all elements of a to t.
Func fill:with:(a [T], t T) {
	for: 0 to: a.length - 1 do: (i){
		a[i] := t
	}
}

test fill_with {
	a := [int] :: [],
	fill: a with: -1,
	// Just don't crash.

	a := [1],
	fill: a with: 0,
	assert_true: a[0] = 0,

	a := [1, 2, 3],
	fill: a with: 0,
	assert_true: a[0] = 0,
	assert_true: a[1] = 0,
	assert_true: a[2] = 0
}

// Copies elements from b into a up to the minimim of their lengths.
Func copy:from:(a [T], b [T]) {
	for: 0 to: min(a.length, b.length) - 1 do: (i){
		a[i] := b[i]
	}
}

test array_copy_to {
	a := [int] :: [],
	b := [int] :: [],
	copy: a from: b,
	// Just don't crash.

	b := [1],
	// Just don't crash.
	copy: a from: b,

	b := [1],
	a := [0],
	copy: a from: b,
	assert_true: a[0] = 1,

	b := [1],
	a := [0, 2],
	copy: a from: b,
	assert_true: a[0] = 1,
	assert_true: a[1] = 2,

	b := [],
	a := [0, 2],
	copy: a from: b,
	assert_true: a[0] = 0,
	assert_true: a[1] = 2
}

// Returns a copy of the array.
Func copy(a [T]) [T] {
	if: a.length = 0 then: {
		return: []
	},
	return: new(a.length, (i int){ a[i] })
}

test array_copy {
	assert_true: copy([int] :: []) = ([int] :: []),
	assert_true: copy([1, 2, 3]) = [1, 2, 3],

	// Check that modifying the original doesn't affect the copy.
	a := [1, 2, 3],
	c := copy(a),
	a[0] := 0,
	a[1] := 1,
	a[2] := 2,
	assert_true: c[0] = 1,
	assert_true: c[1] = 2,
	assert_true: c[2] = 3,

	// Check that modifying the copy doesn't affect the original.
	a := [1, 2, 3],
	c := copy(a),
	c[0] := 0,
	c[1] := 1,
	c[2] := 2,
	assert_true: a[0] = 1,
	assert_true: a[1] = 2,
	assert_true: a[2] = 3
}

// Returns the concatenation of two arrays.
Func +(a [T], b [T]) [T] {
	if: a.length = 0 then: {
		return: copy(b)
	},
	if: b.length = 0 then: {
		return: copy(a)
	},
	c := [T] :: new(a.length + b.length, a[0]),
	for: 1 to: a.length - 1 do: (i){
		c[i] := a[i]
	},
	j := a.length,
	for: 0 to: b.length - 1 do: (i){
		c[j] := b[i],
		j := j + 1
	},
	return: c
}

test array_plus {
	empty := [int] :: [],
	assert_true: empty + empty = empty,
	assert_true: empty + [1] = [1],
	assert_true: [1] + empty = [1],
	assert_true: [1] + [2] = [1, 2],
	assert_true: [1, 2] + [3] = [1, 2, 3],
	assert_true: [1] + [2, 3] = [1, 2, 3],
	assert_true: [1, 2] + [3, 4] = [1, 2, 3, 4]
}

// Calls f(a[i]) for each element of the arra
//  in order of increasing index, i.
Func for:each:(a [T], f (T){}) {
	for: 0 to: a.length - 1 do: (i){
		f(a[i])
	}
}

test array_for_each {
	i := 0,
	for: [int] :: [] each: (_){ ++i },
	assert_true: i = 0,

	i := 0,
	array := ["Hello", ", ", "World", "!"],
	for: array each: (elem){
		assert_true: elem = array[i],
		++i
	},
	assert_true: i = array.length
}
