// And optional T type.
// There is either some value of type T or none.
Type T option [none?, some? T]

// Returns a new option in the some? case with the value t.
Func some(t T) T option {
	return: [some? t]
}

// Returns a new option in the none? case.
Func none() T option {
	return: [none?]
}

// Returns whether two options are equal.
// They are equal if they are either both the none? case,
// or they are both the some? case with = some? values.
Func =(a T option, b T option) bool : =(T, T)bool {
	if: a some: (a_val) {
		if: b some: (b_val) {
			return: a_val = b_val
		},
	} none: {
		if: b none: {
			return: true
		}
	},
	return: false
}

test option_equals {
	assert_true: some(5) = some(5),
	assert_true: (int option :: none()) = none(),
	assert_true: some("Hello") = some("Hello"),
	assert_true: (string option :: none()) = none(),
	assert_false: some(5) = none(),
	assert_false: (int option :: none()) = some(5),
	assert_false: some(5) = some(6),
	assert_false: some("Hello") = some("Good-bye"),
}

// Calls s with the some? value if the case of o is some?.
Func if:some:(o T option, s (T){}) {
	o some? s none? {}
}

test if_some {
	called := false,
	if: some(5) some: (_){called := true},
	assert_true: called,

	called := false,
	if: (int option :: none()) some: (_){called := true},
	assert_false: called,
}

// Calls n() if the case of o is none?.
Func if:none:(o T option, n (){}) {
	// TODO: for some?none?, why can't T be inferred?
	o some? (_ T){} none? n
}

test if_none {
	called := false,
	if: some(5) none: {called := true},
	assert_false: called,

	called := false,
	if: (int option :: none()) none: {called := true},
	assert_true: called,
}

// Calls s with the some? value if the case of o is some?,
// otherwise calls n().
Func if:some:none:(o T option, s (T){}, n (){}) {
	o some? s none? n
}

test if_some_none {
	someCalled := false,
	elseCalled := false,
	if: some(5) some: (_){
		someCalled := true
	} none: {
		elseCalled := true
	},
	assert_true: someCalled,
	assert_false: elseCalled,

	someCalled := false,
	elseCalled := false,
	if: (int option :: none()) some: (_){
		someCalled := true
	} none: {
		elseCalled := true
	},
	assert_false: someCalled,
	assert_true: elseCalled,
}

// Calls s with the some? value if the case of o is some?,
// otherwise calls n().
Func if:none:some:(o T option, n (){}, s (T){}) {
	o some? s none? n
}

// Continually calls cond() until it returns an option in the none? case.
// Each time cond() returns a some? case, f is called with the some? value.
Func while:some:(cond (){T option}, f (T){}) {
	if: cond() some: (t) {
		f(t),
		while: cond some: f
	}
}

test while_some {
	iters := 0,
	while: {int option :: none()} some: (_){++iters},
	assert: iters equals: 0,

	iters := 0,
	while: {iters < 10 true? {some(iters)} false? {none()}} some: (i){
		assert: i equals: iters,
		++iters
	},
	assert: iters equals: 10,
}

// Continually calls cond() until it returns an option in the some? case.
// Each time cond() returns a none? case, f() is called.
Func while:none:(cond (){T option}, f (){}) {
	if: cond() none: {
		f(),
		while: cond none: f
	}
}

test while_none {
	iters := 0,
	while: {int option :: some(1)} none: (){++iters},
	assert: iters equals: 0,

	iters := 0,
	while: {iters < 10 true? {int option :: none()} false? {some(iters)}} none: (){
		++iters
	},
	assert: iters equals: 10,
}

// Adds the string representation of the option to the printer
// and returns the printer.
Func +=(p printer, o T option) printer : +=(printer, T)printer {
	return: o some? (t T) {
		p += "some(" += t += ")",
	} none? {
		p += "none()"
	}
}

test print_option {
	assert: print_string(some(5)) equals: "some(5)",
	assert: print_string(some("Hello, World!")) equals: "some(Hello, World!)",
	assert: print_string(some([1, 2, 3])) equals: "some([1, 2, 3])",
	assert: print_string(int option :: none()) equals: "none()",
	assert: print_string(string option :: none()) equals: "none()",
	assert: print_string([int] option :: none()) equals: "none()",
}
