// An optional T type.
// There is either some value of type T or none.
Type T option [none?, some? T]

// Returns a new option in the some? case with the value t.
Func some(t T) T option {
	return: [some? t]
}

// Returns a new option in the none? case.
Func none() T option {
	return: [none?]
}

// Returns whether two options are equal.
// They are equal if they are either both the none? case,
// or they are both the some? case with = some? values.
Func =(a T option, b T option) bool : { =(T, T)bool } {
	if: a some: (a_val){
		if: b some: (b_val){
			return: a_val = b_val
		}
	} none: {
		if: b none: {
			return: true
		}
	},
	return: false
}

test option_equals {
	assert_true: some(5) = some(5),
	assert_true: (int option :: none()) = none(),
	assert_true: some("Hello") = some("Hello"),
	assert_true: (string option :: none()) = none(),
	assert_false: some(5) = none(),
	assert_false: (int option :: none()) = some(5),
	assert_false: some(5) = some(6),
	assert_false: some("Hello") = some("Good-bye")
}

// Continually calls cond() until it returns an option in the none? case.
// Each time cond() returns a some? case, f is called with the some? value.
Func while:some:(cond (){T option}, f (T){}) {
	if: cond() some: (t){
		f(t),
		while: cond some: f
	}
}

test while_some {
	iters := 0,
	while: { int option :: none() } some: (_){ ++iters },
	assert_true: iters = 0,

	iters := 0,
	while: { iters < 10 true? { some(iters) } false? { none() } } some: (i){
		assert_true: i = iters,
		++iters
	},
	assert_true: iters = 10
}

// Continually calls cond() until it returns an option in the some? case.
// Each time cond() returns a none? case, f() is called.
Func while:none:(cond (){T option}, f (){}) {
	if: cond() none: {
		f(),
		while: cond none: f
	}
}

test while_none {
	iters := 0,
	while: { int option :: some(1) } none: { ++iters },
	assert_true: iters = 0,

	iters := 0,
	while: { iters < 10 true? { int option :: none() } false? { some(iters) } } none: {
		++iters
	},
	assert_true: iters = 10
}
