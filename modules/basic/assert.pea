Func assert_true:(cond bool) {
	if: !cond then: {
		panic("got false, expected true")
	}
}

Func assert_false:(cond bool) {
	if: cond then: {
		panic("got true, expected false")
	}
}

Func assert:equals:(a T, b T) : =(T, T) bool, +=(printer, T)printer {
	if: !(a = b) then: {
		panic(print_string(a, " != ", b, " expected equal"))
	}
}

Func assert_none:(o T option) : +=(printer, T)printer {
	if: o some: (t T) {
		panic(print_string("got ", o, " wanted none()"))
	}
}

Func assert:some:(o T option, b T) :
	+=(printer, T)printer,
	=(T, T) bool,
{
	if: o some: (a T) {
		if: !(a = b) then: {
			panic(print_string(o, " != some(", b, ")"))
		}
	} none: {
		panic(print_string(o, " != some(", b, ")"))
	}
}

Func assert_some:(o T option) : +=(printer, T)printer {
	if: o none: {
		panic(print_string(o, " != some(...)"))
	}
}

Func assert_ok:(o error option) {
	if: o error: (e){
		panic(print_string("got error ", e, ", wanted OK"))
	}
}

Func assert_ok:(o T or_error) {
	if: o error: (e){
		panic(print_string("got error ", e, ", wanted OK"))
	}
}

Func assert_error:(o error option) {
	if: o ok: {
		panic(print_string("got OK, wanted an error"))
	}
}

Func assert_error:(o T or_error) : +=(printer, T)printer {
	if: o ok: (t){
		panic(print_string("got ", t, ", wanted an error"))
	}
}

Func assert:error:(o error option, msg string) {
	if: o ok: {
		panic(print_string("got OK, wanted an error"))
	} error: (e){
		if: message(e) != msg then: {
			panic(print_string("got error ", e, ", wanted ", msg))
		}
	}
}

Func assert:error:(o T or_error, msg string) : +=(printer, T)printer {
	if: o ok: (t){
		panic(print_string("got ", t, ", wanted an error"))
	} error: (e){
		if: message(e) != msg then: {
			panic(print_string("got error ", e, ", wanted ", msg))
		}
	}
}
