// The maximum value of a uint32.
Const max_uint32 := uint32 :: 4294967295

// Increases the value of n by one.
Func ++(n &int) { n := n + 1 }

test int_inc {
	n := -3,
	++n,
	assert_true: n = -2,
	++n,
	assert_true: n = -1,
	++n,
	assert_true: n = 0,
	++n,
	assert_true: n = 1,
	++n,
	assert_true: n = 2,
	++n,
	assert_true: n = 3,
}

// Decreases the value of n by one.
Func --(n &int) { n := n - 1 }

test int_dec {
	n := 3,
	--n,
	assert_true: n = 2,
	--n,
	assert_true: n = 1,
	--n,
	assert_true: n = 0,
	--n,
	assert_true: n = -1,
	--n,
	assert_true: n = -2,
	--n,
	assert_true: n = -3,
}

// Assigns the result of x OP y to x,
// where OP is +, -, *, /, or %,
// as denoted by the operator name.
Func +=(x &int, y int) { x := x + y }
Func +=(x &int8, y int8) { x := x + y }
Func +=(x &int16, y int16) { x := x + y }
Func +=(x &int32, y int32) { x := x + y }
Func +=(x &int64, y int64) { x := x + y }
Func +=(x &uint, y uint) { x := x + y }
Func +=(x &uint8, y uint8) { x := x + y }
Func +=(x &uint16, y uint16) { x := x + y }
Func +=(x &uint32, y uint32) { x := x + y }
Func +=(x &uint64, y uint64) { x := x + y }
Func -=(x &int, y int) { x := x - y }
Func -=(x &int8, y int8) { x := x - y }
Func -=(x &int16, y int16) { x := x - y }
Func -=(x &int32, y int32) { x := x - y }
Func -=(x &int64, y int64) { x := x - y }
Func -=(x &uint, y uint) { x := x - y }
Func -=(x &uint8, y uint8) { x := x - y }
Func -=(x &uint16, y uint16) { x := x - y }
Func -=(x &uint32, y uint32) { x := x - y }
Func -=(x &uint64, y uint64) { x := x - y }
Func *=(x &int, y int) { x := x * y }
Func *=(x &int8, y int8) { x := x * y }
Func *=(x &int16, y int16) { x := x * y }
Func *=(x &int32, y int32) { x := x * y }
Func *=(x &int64, y int64) { x := x * y }
Func *=(x &uint, y uint) { x := x * y }
Func *=(x &uint8, y uint8) { x := x * y }
Func *=(x &uint16, y uint16) { x := x * y }
Func *=(x &uint32, y uint32) { x := x * y }
Func *=(x &uint64, y uint64) { x := x * y }
Func /=(x &int, y int) { x := x / y }
Func /=(x &int8, y int8) { x := x / y }
Func /=(x &int16, y int16) { x := x / y }
Func /=(x &int32, y int32) { x := x / y }
Func /=(x &int64, y int64) { x := x / y }
Func /=(x &uint, y uint) { x := x / y }
Func /=(x &uint8, y uint8) { x := x / y }
Func /=(x &uint16, y uint16) { x := x / y }
Func /=(x &uint32, y uint32) { x := x / y }
Func /=(x &uint64, y uint64) { x := x / y }
Func %=(x &int, y int) { x := x % y }
Func %=(x &int8, y int8) { x := x % y }
Func %=(x &int16, y int16) { x := x % y }
Func %=(x &int32, y int32) { x := x % y }
Func %=(x &int64, y int64) { x := x % y }
Func %=(x &uint, y uint) { x := x % y }
Func %=(x &uint8, y uint8) { x := x % y }
Func %=(x &uint16, y uint16) { x := x % y }
Func %=(x &uint32, y uint32) { x := x % y }
Func %=(x &uint64, y uint64) { x := x % y }

test plus_equals {
	i := 3,
	i += 5,
	assert_true: i = 8,
}

test minus_equals {
	i := 3,
	i -= 5,
	assert_true: i = -2,
}

test times_equals {
	i := 3,
	i *= 5,
	assert_true: i = 15,
}

test divide_equals {
	i := 15,
	i /= 5,
	assert_true: i = 3,
}

test mod_equals {
	i := 18,
	i %= 5,
	assert_true: i = 3,
}

// Calls f with each value from start (inclusive)
// up to end (inclusive) in increasing order.
Func for:to:do:(start int, end int, f (int){}) {
	if: start <= end then: {
		f(start),
		for: start + 1 to: end do: f
	}
}

test for_to_do {
	iters := 0,
	for: 0 to: -1 do: (_){++iters},
	assert_true: iters = 0,

	iters := 0,
	for: 0 to: 0 do: (_){++iters},
	assert_true: iters = 1,

	iters := 0,
	for: 0 to: 1 do: (_){++iters},
	assert_true: iters = 2,

	iters := 0,
	for: -1 to: 1 do: (_){++iters},
	assert_true: iters = 3,

	iters := 0,
	inds := [int] :: new(11, -100),
	for: -5 to: 5 do: (i) {
		inds[iters] := i,
		++iters,
	},
	assert_true: iters = 11,
	assert_true: inds[0] = -5,
	assert_true: inds[1] = -4,
	assert_true: inds[2] = -3,
	assert_true: inds[3] = -2,
	assert_true: inds[4] = -1,
	assert_true: inds[5] = 0,
	assert_true: inds[6] = 1,
	assert_true: inds[7] = 2,
	assert_true: inds[8] = 3,
	assert_true: inds[9] = 4,
	assert_true: inds[10] = 5,
}

// Calls f with each value from start (inclusive)
// down to end (inclusive) in decreasing order.
Func for:down_to:do:(start int, end int, f (int){}) {
	if: start >= end then: {
		f(start),
		for: start -1 down_to: end do: f
	}
}

test for_down_to_do {
	iters := 0,
	for: -1 down_to: 0 do: (_){++iters},
	assert_true: iters = 0,

	iters := 0,
	for: 0 down_to: 0 do: (_){++iters},
	assert_true: iters = 1,

	iters := 0,
	for: 1 down_to: 0 do: (_){++iters},
	assert_true: iters = 2,

	iters := 0,
	for: 1 down_to: -1 do: (_){++iters},
	assert_true: iters = 3,

	iters := 0,
	inds := [int] :: new(11, -100),
	for: 5 down_to: -5 do: (i) {
		inds[iters] := i,
		++iters,
	},
	assert_true: iters = 11,
	assert_true: inds[0] = 5,
	assert_true: inds[1] = 4,
	assert_true: inds[2] = 3,
	assert_true: inds[3] = 2,
	assert_true: inds[4] = 1,
	assert_true: inds[5] = 0,
	assert_true: inds[6] = -1,
	assert_true: inds[7] = -2,
	assert_true: inds[8] = -3,
	assert_true: inds[9] = -4,
	assert_true: inds[10] = -5,
}

// Adds the string representation to the printer and returns the printer.
Func +=(p printer, u uint) printer { return: add_uint64(p, uint64 :: u) }
Func +=(p printer, u uint8) printer { return: add_uint64(p, uint64 :: u) }
Func +=(p printer, u uint16) printer { return: add_uint64(p, uint64 :: u) }
Func +=(p printer, u uint32) printer { return: add_uint64(p, uint64 :: u) }
Func +=(p printer, u uint64) printer { return: add_uint64(p, u) }

func add_uint64(p printer, u uint64) printer {
	// 20 bytes is big enough for both base 10 uint64 and int64.
	bs := [uint8] :: new(20, uint8 :: 0),
	i := bs.length - 1,
	while: { u >= 10 } do: {
		u_next := u / 10,
		bs[i] := uint8 :: u - u_next*10 + '0',
		u := u_next,
		--i,
	},
	bs[i] := uint8 :: u + '0',
	add_bytes(p, bs[i, bs.length]),
	return: p
}

test print_uint64 {
	assert_true: print_string(uint64 :: 0) = "0",
	assert_true: print_string(uint64 :: 1) = "1",
	assert_true: print_string(uint64 :: 12345) = "12345",
	assert_true: print_string(uint64 :: 18446744073709551615) = "18446744073709551615",
}

// Adds the string representation to the printer and returns the printer.
Func +=(p printer, d int) printer { return: add_int64(p, int64 :: d) }
Func +=(p printer, d int8) printer { return: add_int64(p, int64 :: d) }
Func +=(p printer, d int16) printer { return: add_int64(p, int64 :: d) }
Func +=(p printer, d int32) printer { return: add_int64(p, int64 :: d) }
Func +=(p printer, d int64) printer { return: add_int64(p, d) }

func add_int64(p printer, d int64) printer {
	return: d < 0 true? {
		p += "-",
		add_uint64(p, uint64 :: -d)
	} false? {
		add_uint64(p, uint64 :: d)
	}
}

test print_int64 {
	assert_true: print_string(int64 :: 0) = "0",
	assert_true: print_string(int64 :: 1) = "1",
	assert_true: print_string(int64 :: -1) = "-1",
	assert_true: print_string(int64 :: 12345) = "12345",
	assert_true: print_string(int64 :: -12345) = "-12345",
	assert_true: print_string(int64 :: 9223372036854775807) = "9223372036854775807",
	assert_true: print_string(int64 :: -9223372036854775808) = "-9223372036854775808",
}

// This test checks for a regression in the compiler
// where +=(printer, int64) was returning
// a copy of the printer instead of a reference to it.
test print_int64_return_copy {
	p := printer :: new(),
	q := p += 5,
	q += "boo",
	assert_true: (string :: reset(p)) = "5boo",
}
