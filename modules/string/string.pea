Import "assert"
Import "basic"
import "print"
import "unicode/utf8"

const rk_base := uint32 :: 16777619

// Returns the index of the first occurrence of n in h.
Func index(h S, n S) int option : {
	.length(S)int,
	[](S, int)uint8,
	[](S, int, int)S,
	=(S, S)bool,
} {
	// Rabin-Karp based on https://medium.com/swlh/rabin-karp-algorithm-using-polynomial-hashing-and-modular-arithmetic-437627b37db6,
	// using rk_base as the base (prime number from Go implementation),
	// and using max_uint32 as Q (just rely on overflow).
	if: h.length < n.length then: {
		return: none()
	},

	// m = rk_base^(n.length-1)
	m := uint32 :: 1,
	for: 1 to: n.length - 1 do: (_){
		m *= rk_base
	},

	hh := uint32 :: 0,
	hn := uint32 :: 0,
	for: 0 to: n.length - 1 do: (i){
		hh := hh*rk_base + (uint32 :: h[i]),
		hn := hn*rk_base + (uint32 :: n[i])
	},
	i := 0,
	forever: {
		if: hh = hn && { h[i, i + n.length] = n } then: {
			return: some(i)
		},
		if: i + n.length >= h.length then: {
			return: none()
		},
		hh -= m*(uint32 :: h[i]),
		hh *= rk_base,
		hh += (uint32 :: h[i + n.length]),
		++i
	},
	panic("unreachable"),
	return: none()
}

test index {
	assert: index("", "") some: 0,
	assert: index("xyz", "") some: 0,
	assert: index("xyz", "x") some: 0,
	assert: index("xyz", "y") some: 1,
	assert: index("xyz", "z") some: 2,
	assert: index("xyz", "y") some: 1,
	assert: index("xyz", "yz") some: 1,
	assert: index("xyz", "xyz") some: 0,
	assert: index("abcdef123def", "def") some: "abc".length,
	assert: index("abcdef☺☹123def", "☺☹") some: "abcdef".length,
	assert: index("abcdef☺☹123def", "123") some: "abcdef☺☹".length,

	assert_none: index("", "xyz"),
	assert_none: index("abc", "x"),
	assert_none: index("abc", "ba"),
	assert_none: index("abc", "xyz"),
	assert_none: index("abcdef123def", "xyz"),
	assert_none: index("abcdef☺☹123def", "xyz"),
	assert_none: index("abcdef123def", "☺☹"),

	// Make sure it works with [uint8] too.
	assert: index([uint8 :: 'a', 'b', 'c', 'd', 'e', 'f'], ['b', 'c']) some: 1,
	assert_none: index([uint8 :: 'a', 'b', 'c', 'd', 'e', 'f'], ['n'])
}

// Returns whether h contains n as a substring.
Func contains(h S, n S) bool : {
	.length(S)int,
	[](S, int)uint8,
	[](S, int, int)S,
	=(S, S)bool,
} {
	return: index(h, n) some? (_){ true } none? { false }
}

test contains {
	assert_true: contains("", ""),
	assert_true: contains("xyz", ""),
	assert_true: contains("xyz", "x"),
	assert_true: contains("xyz", "y"),
	assert_true: contains("xyz", "z"),
	assert_true: contains("xyz", "y"),
	assert_true: contains("xyz", "yz"),
	assert_true: contains("xyz", "xyz"),
	assert_true: contains("abcdef123def", "def"),
	assert_true: contains("abcdef☺☹123def", "☺☹"),
	assert_true: contains("abcdef☺☹123def", "123"),

	assert_false: contains("", "xyz"),
	assert_false: contains("abc", "x"),
	assert_false: contains("abc", "ba"),
	assert_false: contains("abc", "xyz"),
	assert_false: contains("abcdef123def", "xyz"),
	assert_false: contains("abcdef☺☹123def", "xyz"),
	assert_false: contains("abcdef123def", "☺☹"),

	// Make sure it works with [uint8] too.
	assert_true: contains([uint8 :: 'a', 'b', 'c', 'd', 'e', 'f'], ['b', 'c']),
	assert_false: contains([uint8 :: 'a', 'b', 'c', 'd', 'e', 'f'], ['n'])
}

// Returns the number of non-overlapping occurrences of sub in s.
// If sub is the empty string, count returns
// the number of unicode code points in s plus 1.
Func count(s S, sub S) int : {
	.length(S)int,
	[](S, int)uint8,
	[](S, int, int)S,
	=(S, S)bool,
} {
	n := 0,
	if: sub.length = 0 then: {
		while: { utf8#consume(s) } some: (_){
			++n
		},
		return: n + 1
	},
	while: { index(s, sub) } some: (i){
		++n,
		if: i + sub.length > s.length then: {
			return: n
		},
		s := s[i + sub.length, s.length]
	},
	return: n
}

test count {
	assert: count("", "") equals: 1,
	assert: count("a", "") equals: 2,
	assert: count("aa", "") equals: 3,
	assert: count("☺", "") equals: 2,
	assert: count("☺☺", "") equals: 3,

	assert: count("", "a") equals: 0,
	assert: count("xyz", "a") equals: 0,
	assert: count("abc", "a") equals: 1,
	assert: count("aaa", "a") equals: 3,

	assert: count("", "☺") equals: 0,
	assert: count("xyz", "☺") equals: 0,
	assert: count("a☺b", "☺") equals: 1,
	assert: count("a☺ba☺b", "☺") equals: 2,
	assert: count("a☺ba☺", "☺") equals: 2,
	assert: count("☺☺", "☺") equals: 2,

	assert: count("", "abc") equals: 0,
	assert: count("a", "abc") equals: 0,
	assert: count("ab", "abc") equals: 0,
	assert: count("abc", "abc") equals: 1,
	assert: count("abcabc", "abc") equals: 2,
	assert: count("abcdefabc", "abc") equals: 2,
	assert: count("abcdefabcab", "abc") equals: 2,

	assert: count("abcdefabcab", "a☺bc") equals: 0,
	assert: count("abcdefa☺bcab", "a☺bc") equals: 1
}

// Returns an array of slices of s for all substrings split by occurrences of delim.
// If delim is empty, then the return is an array of each unicode code point in s.
// If s does not contain delim, then the return has one element containing s.
Func split(s S, delim S) [S] : {
	.length(S)int,
	[](S, int)uint8,
	[](S, int, int)S,
	=(S, S)bool,
} {
	n := 0,
	if: delim.length = 0 then: {
		fields := [S] :: new(count(s, delim) - 1, s[0, 0]),
		i := 0,
		utf8#for: s runes: (_ rune, w int){
			fields[n] := s[i, i + w],
			i += w,
			++n
		},
		return: fields
	},

	fields := [S] :: new(count(s, delim) + 1, s[0, 0]),
	while: { index(s, delim) } some: (i){
		fields[n] := s[0, i],
		++n,
		s := s[i + delim.length, s.length]
	},
	fields[n] := s,
	return: fields
}

test split {
	assert: split("", "") equals: [],
	assert: split("abc", "") equals: ["a", "b", "c"],
	assert: split("a☺b☺c☺", "") equals: ["a", "☺", "b", "☺", "c", "☺"],
	assert: split("☺☺☺", "") equals: ["☺", "☺", "☺"],

	assert: split("", "a") equals: [""],
	assert: split("", "☺") equals: [""],
	assert: split("", "abc") equals: [""],
	assert: split("", "☺☹") equals: [""],

	assert: split("aaaa", "a") equals: ["", "", "", "", ""],
	assert: split("☺☺☺☺", "☺") equals: ["", "", "", "", ""],
	assert: split("abababab", "ab") equals: ["", "", "", "", ""],
	assert: split("☺☹☺☹☺☹☺☹", "☺☹") equals: ["", "", "", "", ""],

	assert: split("a,b,c", ",") equals: ["a", "b", "c"],
	assert: split("a,b,c,", ",") equals: ["a", "b", "c", ""],
	assert: split(",a,b,c,", ",") equals: ["", "a", "b", "c", ""],
	assert: split(",a,,b,,c,", ",") equals: ["", "a", "", "b", "", "c", ""],

	assert: split("abc123xyz", "123") equals: ["abc", "xyz"],
	assert: split("123abc123123xyz123", "123") equals: ["", "abc", "", "xyz", ""],
	assert: split("abc☺xyz", "☺") equals: ["abc", "xyz"],
	assert: split("☺abc☺☺xyz☺", "☺") equals: ["", "abc", "", "xyz", ""],
	assert: split("abc☺☺☺xyz", "☺☺☺") equals: ["abc", "xyz"],
	assert: split("☺☺☺abc☺☺☺☺☺☺xyz☺☺☺", "☺☺☺") equals: ["", "abc", "", "xyz", ""]
}
