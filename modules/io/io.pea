Import "basic"

Type read_result [ok? int, eof?, error? error]

Type write_result := int or_error

Func read_all(r R) [uint8] or_error : read(R, [uint8]) read_result {
	total := 0,
	buf := [uint8] :: new(128, uint8 :: 0),
	while: {true} do: {
		read(r, buf[total, buf.length]) error? (e error) {
			return: [error? e]
		} eof? {
			return: [ok? buf[0, total]]
		} ok? (n) {
			total := total + n
		},
		if: total = buf.length then: {
			buf2 := [uint8] :: new(buf.length*2, uint8 :: 0),
			for: 0 to: total do: (i) {
				buf2[i] := buf[i]
			},
			buf := buf2
		}
	},
	return: [error? new("impossible")]
}
