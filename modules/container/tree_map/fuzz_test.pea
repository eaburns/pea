/*
Some fuzz tests created with the following Go program:
	package main

	import (
		"fmt"
		"math/rand"
		"sort"
	)

	func main() {
		rand.Seed(12)
		fmt.Println(`Import "assert"`)
		fmt.Println(`Import "basic"`)
		fmt.Println(`import "print"`)
		for i := 0; i < 50; i++ {
			printTest(i)
		}
	}
	func printTest(i int) {
		fmt.Printf("test fuzz%d {\n", i)
		fmt.Println("	m := (int, int) tree_map :: new(),")
		n := rand.Intn(10) + 1
		in := make([]struct {
			k int
			v int
		}, n)
		for i := 0; i < n; i++ {
			in[i].k = rand.Intn(100)
			in[i].v = rand.Intn(100)
			fmt.Printf("	m at: %d put: %d,\n", in[i].k, in[i].v)
		}
		fmt.Println("	check_invariants(m),")
		fmt.Println("	assert: m elements: [")
		sort.SliceStable(in, func(i, j int) bool { return in[i].k < in[j].k })
		for i, x := range in {
			if i < len(in)-1 && in[i+1].k == in[i].k {
				continue	// dedup. prefer last added.
			}
			fmt.Printf("		[.key %d, .val %d],\n", x.k, x.v)
		}
		fmt.Println("	],")
		for i, x := range in {
			if i < len(in)-1 && in[i+1].k == in[i].k {
				continue	// dedup. prefer last added.
			}
			fmt.Printf("	assert: find(m, %d) some: %d,\n", x.k, x.v)
		}
		fmt.Println("}")
	}
*/
Import "assert"
Import "basic"
import "print"
test fuzz0 {
	m := (int, int) tree_map :: new(),
	m at: 43 put: 58,
	m at: 50 put: 74,
	m at: 26 put: 83,
	m at: 43 put: 95,
	m at: 8 put: 72,
	m at: 33 put: 93,
	m at: 16 put: 38,
	m at: 49 put: 13,
	m at: 32 put: 71,
	m at: 62 put: 93,
	check_invariants(m),
	assert: m elements: [
		[.key 8, .val 72],
		[.key 16, .val 38],
		[.key 26, .val 83],
		[.key 32, .val 71],
		[.key 33, .val 93],
		[.key 43, .val 95],
		[.key 49, .val 13],
		[.key 50, .val 74],
		[.key 62, .val 93],
	],
	assert: find(m, 8) some: 72,
	assert: find(m, 16) some: 38,
	assert: find(m, 26) some: 83,
	assert: find(m, 32) some: 71,
	assert: find(m, 33) some: 93,
	assert: find(m, 43) some: 95,
	assert: find(m, 49) some: 13,
	assert: find(m, 50) some: 74,
	assert: find(m, 62) some: 93,
}
test fuzz1 {
	m := (int, int) tree_map :: new(),
	m at: 60 put: 10,
	m at: 47 put: 30,
	m at: 57 put: 80,
	m at: 34 put: 10,
	m at: 83 put: 55,
	m at: 79 put: 60,
	check_invariants(m),
	assert: m elements: [
		[.key 34, .val 10],
		[.key 47, .val 30],
		[.key 57, .val 80],
		[.key 60, .val 10],
		[.key 79, .val 60],
		[.key 83, .val 55],
	],
	assert: find(m, 34) some: 10,
	assert: find(m, 47) some: 30,
	assert: find(m, 57) some: 80,
	assert: find(m, 60) some: 10,
	assert: find(m, 79) some: 60,
	assert: find(m, 83) some: 55,
}
test fuzz2 {
	m := (int, int) tree_map :: new(),
	m at: 70 put: 88,
	m at: 68 put: 65,
	m at: 81 put: 30,
	check_invariants(m),
	assert: m elements: [
		[.key 68, .val 65],
		[.key 70, .val 88],
		[.key 81, .val 30],
	],
	assert: find(m, 68) some: 65,
	assert: find(m, 70) some: 88,
	assert: find(m, 81) some: 30,
}
test fuzz3 {
	m := (int, int) tree_map :: new(),
	m at: 75 put: 29,
	m at: 1 put: 22,
	m at: 95 put: 60,
	m at: 21 put: 11,
	m at: 33 put: 19,
	m at: 62 put: 94,
	m at: 26 put: 83,
	m at: 23 put: 20,
	m at: 9 put: 43,
	check_invariants(m),
	assert: m elements: [
		[.key 1, .val 22],
		[.key 9, .val 43],
		[.key 21, .val 11],
		[.key 23, .val 20],
		[.key 26, .val 83],
		[.key 33, .val 19],
		[.key 62, .val 94],
		[.key 75, .val 29],
		[.key 95, .val 60],
	],
	assert: find(m, 1) some: 22,
	assert: find(m, 9) some: 43,
	assert: find(m, 21) some: 11,
	assert: find(m, 23) some: 20,
	assert: find(m, 26) some: 83,
	assert: find(m, 33) some: 19,
	assert: find(m, 62) some: 94,
	assert: find(m, 75) some: 29,
	assert: find(m, 95) some: 60,
}
test fuzz4 {
	m := (int, int) tree_map :: new(),
	m at: 4 put: 15,
	m at: 10 put: 24,
	m at: 96 put: 98,
	m at: 26 put: 48,
	m at: 99 put: 90,
	m at: 2 put: 22,
	m at: 29 put: 37,
	m at: 62 put: 27,
	m at: 16 put: 15,
	check_invariants(m),
	assert: m elements: [
		[.key 2, .val 22],
		[.key 4, .val 15],
		[.key 10, .val 24],
		[.key 16, .val 15],
		[.key 26, .val 48],
		[.key 29, .val 37],
		[.key 62, .val 27],
		[.key 96, .val 98],
		[.key 99, .val 90],
	],
	assert: find(m, 2) some: 22,
	assert: find(m, 4) some: 15,
	assert: find(m, 10) some: 24,
	assert: find(m, 16) some: 15,
	assert: find(m, 26) some: 48,
	assert: find(m, 29) some: 37,
	assert: find(m, 62) some: 27,
	assert: find(m, 96) some: 98,
	assert: find(m, 99) some: 90,
}
test fuzz5 {
	m := (int, int) tree_map :: new(),
	m at: 38 put: 5,
	m at: 25 put: 89,
	check_invariants(m),
	assert: m elements: [
		[.key 25, .val 89],
		[.key 38, .val 5],
	],
	assert: find(m, 25) some: 89,
	assert: find(m, 38) some: 5,
}
test fuzz6 {
	m := (int, int) tree_map :: new(),
	m at: 29 put: 11,
	m at: 79 put: 14,
	m at: 85 put: 6,
	m at: 36 put: 17,
	m at: 54 put: 91,
	m at: 19 put: 91,
	m at: 1 put: 57,
	m at: 52 put: 11,
	check_invariants(m),
	assert: m elements: [
		[.key 1, .val 57],
		[.key 19, .val 91],
		[.key 29, .val 11],
		[.key 36, .val 17],
		[.key 52, .val 11],
		[.key 54, .val 91],
		[.key 79, .val 14],
		[.key 85, .val 6],
	],
	assert: find(m, 1) some: 57,
	assert: find(m, 19) some: 91,
	assert: find(m, 29) some: 11,
	assert: find(m, 36) some: 17,
	assert: find(m, 52) some: 11,
	assert: find(m, 54) some: 91,
	assert: find(m, 79) some: 14,
	assert: find(m, 85) some: 6,
}
test fuzz7 {
	m := (int, int) tree_map :: new(),
	m at: 23 put: 99,
	m at: 48 put: 67,
	m at: 41 put: 98,
	m at: 43 put: 56,
	m at: 3 put: 61,
	check_invariants(m),
	assert: m elements: [
		[.key 3, .val 61],
		[.key 23, .val 99],
		[.key 41, .val 98],
		[.key 43, .val 56],
		[.key 48, .val 67],
	],
	assert: find(m, 3) some: 61,
	assert: find(m, 23) some: 99,
	assert: find(m, 41) some: 98,
	assert: find(m, 43) some: 56,
	assert: find(m, 48) some: 67,
}
test fuzz8 {
	m := (int, int) tree_map :: new(),
	m at: 63 put: 19,
	m at: 35 put: 86,
	m at: 5 put: 56,
	m at: 23 put: 52,
	m at: 54 put: 28,
	m at: 65 put: 61,
	m at: 33 put: 18,
	check_invariants(m),
	assert: m elements: [
		[.key 5, .val 56],
		[.key 23, .val 52],
		[.key 33, .val 18],
		[.key 35, .val 86],
		[.key 54, .val 28],
		[.key 63, .val 19],
		[.key 65, .val 61],
	],
	assert: find(m, 5) some: 56,
	assert: find(m, 23) some: 52,
	assert: find(m, 33) some: 18,
	assert: find(m, 35) some: 86,
	assert: find(m, 54) some: 28,
	assert: find(m, 63) some: 19,
	assert: find(m, 65) some: 61,
}
test fuzz9 {
	m := (int, int) tree_map :: new(),
	m at: 39 put: 56,
	m at: 75 put: 78,
	m at: 17 put: 37,
	m at: 92 put: 18,
	m at: 5 put: 60,
	m at: 70 put: 52,
	check_invariants(m),
	assert: m elements: [
		[.key 5, .val 60],
		[.key 17, .val 37],
		[.key 39, .val 56],
		[.key 70, .val 52],
		[.key 75, .val 78],
		[.key 92, .val 18],
	],
	assert: find(m, 5) some: 60,
	assert: find(m, 17) some: 37,
	assert: find(m, 39) some: 56,
	assert: find(m, 70) some: 52,
	assert: find(m, 75) some: 78,
	assert: find(m, 92) some: 18,
}
test fuzz10 {
	m := (int, int) tree_map :: new(),
	m at: 16 put: 5,
	m at: 60 put: 90,
	m at: 61 put: 66,
	m at: 15 put: 65,
	m at: 72 put: 73,
	m at: 0 put: 32,
	m at: 24 put: 57,
	m at: 59 put: 79,
	check_invariants(m),
	assert: m elements: [
		[.key 0, .val 32],
		[.key 15, .val 65],
		[.key 16, .val 5],
		[.key 24, .val 57],
		[.key 59, .val 79],
		[.key 60, .val 90],
		[.key 61, .val 66],
		[.key 72, .val 73],
	],
	assert: find(m, 0) some: 32,
	assert: find(m, 15) some: 65,
	assert: find(m, 16) some: 5,
	assert: find(m, 24) some: 57,
	assert: find(m, 59) some: 79,
	assert: find(m, 60) some: 90,
	assert: find(m, 61) some: 66,
	assert: find(m, 72) some: 73,
}
test fuzz11 {
	m := (int, int) tree_map :: new(),
	m at: 62 put: 26,
	m at: 45 put: 23,
	m at: 18 put: 11,
	m at: 28 put: 18,
	m at: 38 put: 58,
	check_invariants(m),
	assert: m elements: [
		[.key 18, .val 11],
		[.key 28, .val 18],
		[.key 38, .val 58],
		[.key 45, .val 23],
		[.key 62, .val 26],
	],
	assert: find(m, 18) some: 11,
	assert: find(m, 28) some: 18,
	assert: find(m, 38) some: 58,
	assert: find(m, 45) some: 23,
	assert: find(m, 62) some: 26,
}
test fuzz12 {
	m := (int, int) tree_map :: new(),
	m at: 66 put: 87,
	m at: 35 put: 76,
	m at: 78 put: 5,
	m at: 58 put: 46,
	m at: 9 put: 62,
	m at: 5 put: 67,
	m at: 1 put: 49,
	m at: 24 put: 11,
	check_invariants(m),
	assert: m elements: [
		[.key 1, .val 49],
		[.key 5, .val 67],
		[.key 9, .val 62],
		[.key 24, .val 11],
		[.key 35, .val 76],
		[.key 58, .val 46],
		[.key 66, .val 87],
		[.key 78, .val 5],
	],
	assert: find(m, 1) some: 49,
	assert: find(m, 5) some: 67,
	assert: find(m, 9) some: 62,
	assert: find(m, 24) some: 11,
	assert: find(m, 35) some: 76,
	assert: find(m, 58) some: 46,
	assert: find(m, 66) some: 87,
	assert: find(m, 78) some: 5,
}
test fuzz13 {
	m := (int, int) tree_map :: new(),
	m at: 75 put: 79,
	m at: 51 put: 28,
	m at: 22 put: 16,
	check_invariants(m),
	assert: m elements: [
		[.key 22, .val 16],
		[.key 51, .val 28],
		[.key 75, .val 79],
	],
	assert: find(m, 22) some: 16,
	assert: find(m, 51) some: 28,
	assert: find(m, 75) some: 79,
}
test fuzz14 {
	m := (int, int) tree_map :: new(),
	m at: 67 put: 69,
	m at: 12 put: 21,
	m at: 2 put: 41,
	m at: 69 put: 71,
	m at: 63 put: 59,
	m at: 20 put: 30,
	m at: 73 put: 49,
	m at: 45 put: 43,
	m at: 24 put: 71,
	m at: 2 put: 50,
	check_invariants(m),
	assert: m elements: [
		[.key 2, .val 50],
		[.key 12, .val 21],
		[.key 20, .val 30],
		[.key 24, .val 71],
		[.key 45, .val 43],
		[.key 63, .val 59],
		[.key 67, .val 69],
		[.key 69, .val 71],
		[.key 73, .val 49],
	],
	assert: find(m, 2) some: 50,
	assert: find(m, 12) some: 21,
	assert: find(m, 20) some: 30,
	assert: find(m, 24) some: 71,
	assert: find(m, 45) some: 43,
	assert: find(m, 63) some: 59,
	assert: find(m, 67) some: 69,
	assert: find(m, 69) some: 71,
	assert: find(m, 73) some: 49,
}
test fuzz15 {
	m := (int, int) tree_map :: new(),
	m at: 17 put: 85,
	m at: 13 put: 23,
	m at: 23 put: 55,
	m at: 29 put: 24,
	m at: 79 put: 41,
	m at: 28 put: 95,
	m at: 53 put: 58,
	m at: 4 put: 66,
	check_invariants(m),
	assert: m elements: [
		[.key 4, .val 66],
		[.key 13, .val 23],
		[.key 17, .val 85],
		[.key 23, .val 55],
		[.key 28, .val 95],
		[.key 29, .val 24],
		[.key 53, .val 58],
		[.key 79, .val 41],
	],
	assert: find(m, 4) some: 66,
	assert: find(m, 13) some: 23,
	assert: find(m, 17) some: 85,
	assert: find(m, 23) some: 55,
	assert: find(m, 28) some: 95,
	assert: find(m, 29) some: 24,
	assert: find(m, 53) some: 58,
	assert: find(m, 79) some: 41,
}
test fuzz16 {
	m := (int, int) tree_map :: new(),
	m at: 54 put: 70,
	m at: 77 put: 21,
	m at: 44 put: 94,
	m at: 5 put: 0,
	m at: 56 put: 9,
	m at: 30 put: 52,
	m at: 4 put: 47,
	check_invariants(m),
	assert: m elements: [
		[.key 4, .val 47],
		[.key 5, .val 0],
		[.key 30, .val 52],
		[.key 44, .val 94],
		[.key 54, .val 70],
		[.key 56, .val 9],
		[.key 77, .val 21],
	],
	assert: find(m, 4) some: 47,
	assert: find(m, 5) some: 0,
	assert: find(m, 30) some: 52,
	assert: find(m, 44) some: 94,
	assert: find(m, 54) some: 70,
	assert: find(m, 56) some: 9,
	assert: find(m, 77) some: 21,
}
test fuzz17 {
	m := (int, int) tree_map :: new(),
	m at: 8 put: 11,
	m at: 73 put: 2,
	m at: 68 put: 27,
	m at: 89 put: 24,
	m at: 28 put: 37,
	m at: 32 put: 10,
	m at: 73 put: 61,
	m at: 73 put: 61,
	m at: 21 put: 83,
	check_invariants(m),
	assert: m elements: [
		[.key 8, .val 11],
		[.key 21, .val 83],
		[.key 28, .val 37],
		[.key 32, .val 10],
		[.key 68, .val 27],
		[.key 73, .val 61],
		[.key 89, .val 24],
	],
	assert: find(m, 8) some: 11,
	assert: find(m, 21) some: 83,
	assert: find(m, 28) some: 37,
	assert: find(m, 32) some: 10,
	assert: find(m, 68) some: 27,
	assert: find(m, 73) some: 61,
	assert: find(m, 89) some: 24,
}
test fuzz18 {
	m := (int, int) tree_map :: new(),
	m at: 23 put: 10,
	check_invariants(m),
	assert: m elements: [
		[.key 23, .val 10],
	],
	assert: find(m, 23) some: 10,
}
test fuzz19 {
	m := (int, int) tree_map :: new(),
	m at: 69 put: 79,
	m at: 32 put: 66,
	check_invariants(m),
	assert: m elements: [
		[.key 32, .val 66],
		[.key 69, .val 79],
	],
	assert: find(m, 32) some: 66,
	assert: find(m, 69) some: 79,
}
test fuzz20 {
	m := (int, int) tree_map :: new(),
	m at: 32 put: 2,
	m at: 72 put: 93,
	m at: 59 put: 65,
	m at: 10 put: 59,
	m at: 15 put: 96,
	m at: 65 put: 69,
	m at: 6 put: 79,
	m at: 63 put: 83,
	m at: 70 put: 86,
	m at: 69 put: 93,
	check_invariants(m),
	assert: m elements: [
		[.key 6, .val 79],
		[.key 10, .val 59],
		[.key 15, .val 96],
		[.key 32, .val 2],
		[.key 59, .val 65],
		[.key 63, .val 83],
		[.key 65, .val 69],
		[.key 69, .val 93],
		[.key 70, .val 86],
		[.key 72, .val 93],
	],
	assert: find(m, 6) some: 79,
	assert: find(m, 10) some: 59,
	assert: find(m, 15) some: 96,
	assert: find(m, 32) some: 2,
	assert: find(m, 59) some: 65,
	assert: find(m, 63) some: 83,
	assert: find(m, 65) some: 69,
	assert: find(m, 69) some: 93,
	assert: find(m, 70) some: 86,
	assert: find(m, 72) some: 93,
}
test fuzz21 {
	m := (int, int) tree_map :: new(),
	m at: 84 put: 7,
	m at: 82 put: 73,
	m at: 78 put: 91,
	m at: 45 put: 1,
	m at: 14 put: 18,
	check_invariants(m),
	assert: m elements: [
		[.key 14, .val 18],
		[.key 45, .val 1],
		[.key 78, .val 91],
		[.key 82, .val 73],
		[.key 84, .val 7],
	],
	assert: find(m, 14) some: 18,
	assert: find(m, 45) some: 1,
	assert: find(m, 78) some: 91,
	assert: find(m, 82) some: 73,
	assert: find(m, 84) some: 7,
}
test fuzz22 {
	m := (int, int) tree_map :: new(),
	m at: 66 put: 70,
	m at: 13 put: 49,
	m at: 97 put: 30,
	m at: 45 put: 51,
	m at: 5 put: 98,
	m at: 47 put: 26,
	m at: 33 put: 17,
	m at: 4 put: 95,
	m at: 79 put: 24,
	m at: 87 put: 92,
	check_invariants(m),
	assert: m elements: [
		[.key 4, .val 95],
		[.key 5, .val 98],
		[.key 13, .val 49],
		[.key 33, .val 17],
		[.key 45, .val 51],
		[.key 47, .val 26],
		[.key 66, .val 70],
		[.key 79, .val 24],
		[.key 87, .val 92],
		[.key 97, .val 30],
	],
	assert: find(m, 4) some: 95,
	assert: find(m, 5) some: 98,
	assert: find(m, 13) some: 49,
	assert: find(m, 33) some: 17,
	assert: find(m, 45) some: 51,
	assert: find(m, 47) some: 26,
	assert: find(m, 66) some: 70,
	assert: find(m, 79) some: 24,
	assert: find(m, 87) some: 92,
	assert: find(m, 97) some: 30,
}
test fuzz23 {
	m := (int, int) tree_map :: new(),
	m at: 22 put: 93,
	m at: 77 put: 25,
	m at: 52 put: 19,
	m at: 78 put: 13,
	m at: 45 put: 71,
	m at: 3 put: 46,
	m at: 69 put: 73,
	m at: 8 put: 66,
	m at: 12 put: 47,
	check_invariants(m),
	assert: m elements: [
		[.key 3, .val 46],
		[.key 8, .val 66],
		[.key 12, .val 47],
		[.key 22, .val 93],
		[.key 45, .val 71],
		[.key 52, .val 19],
		[.key 69, .val 73],
		[.key 77, .val 25],
		[.key 78, .val 13],
	],
	assert: find(m, 3) some: 46,
	assert: find(m, 8) some: 66,
	assert: find(m, 12) some: 47,
	assert: find(m, 22) some: 93,
	assert: find(m, 45) some: 71,
	assert: find(m, 52) some: 19,
	assert: find(m, 69) some: 73,
	assert: find(m, 77) some: 25,
	assert: find(m, 78) some: 13,
}
test fuzz24 {
	m := (int, int) tree_map :: new(),
	m at: 45 put: 36,
	m at: 33 put: 29,
	m at: 23 put: 13,
	check_invariants(m),
	assert: m elements: [
		[.key 23, .val 13],
		[.key 33, .val 29],
		[.key 45, .val 36],
	],
	assert: find(m, 23) some: 13,
	assert: find(m, 33) some: 29,
	assert: find(m, 45) some: 36,
}
test fuzz25 {
	m := (int, int) tree_map :: new(),
	m at: 15 put: 96,
	m at: 36 put: 7,
	m at: 97 put: 51,
	m at: 8 put: 29,
	m at: 44 put: 62,
	m at: 83 put: 10,
	check_invariants(m),
	assert: m elements: [
		[.key 8, .val 29],
		[.key 15, .val 96],
		[.key 36, .val 7],
		[.key 44, .val 62],
		[.key 83, .val 10],
		[.key 97, .val 51],
	],
	assert: find(m, 8) some: 29,
	assert: find(m, 15) some: 96,
	assert: find(m, 36) some: 7,
	assert: find(m, 44) some: 62,
	assert: find(m, 83) some: 10,
	assert: find(m, 97) some: 51,
}
test fuzz26 {
	m := (int, int) tree_map :: new(),
	m at: 32 put: 34,
	m at: 4 put: 74,
	m at: 36 put: 92,
	m at: 71 put: 5,
	m at: 27 put: 23,
	m at: 92 put: 53,
	m at: 78 put: 22,
	m at: 0 put: 49,
	check_invariants(m),
	assert: m elements: [
		[.key 0, .val 49],
		[.key 4, .val 74],
		[.key 27, .val 23],
		[.key 32, .val 34],
		[.key 36, .val 92],
		[.key 71, .val 5],
		[.key 78, .val 22],
		[.key 92, .val 53],
	],
	assert: find(m, 0) some: 49,
	assert: find(m, 4) some: 74,
	assert: find(m, 27) some: 23,
	assert: find(m, 32) some: 34,
	assert: find(m, 36) some: 92,
	assert: find(m, 71) some: 5,
	assert: find(m, 78) some: 22,
	assert: find(m, 92) some: 53,
}
test fuzz27 {
	m := (int, int) tree_map :: new(),
	m at: 56 put: 10,
	check_invariants(m),
	assert: m elements: [
		[.key 56, .val 10],
	],
	assert: find(m, 56) some: 10,
}
test fuzz28 {
	m := (int, int) tree_map :: new(),
	m at: 70 put: 23,
	m at: 27 put: 66,
	m at: 34 put: 99,
	m at: 45 put: 65,
	check_invariants(m),
	assert: m elements: [
		[.key 27, .val 66],
		[.key 34, .val 99],
		[.key 45, .val 65],
		[.key 70, .val 23],
	],
	assert: find(m, 27) some: 66,
	assert: find(m, 34) some: 99,
	assert: find(m, 45) some: 65,
	assert: find(m, 70) some: 23,
}
test fuzz29 {
	m := (int, int) tree_map :: new(),
	m at: 77 put: 46,
	m at: 29 put: 2,
	m at: 66 put: 7,
	m at: 73 put: 1,
	m at: 63 put: 88,
	m at: 96 put: 37,
	m at: 76 put: 57,
	m at: 80 put: 20,
	check_invariants(m),
	assert: m elements: [
		[.key 29, .val 2],
		[.key 63, .val 88],
		[.key 66, .val 7],
		[.key 73, .val 1],
		[.key 76, .val 57],
		[.key 77, .val 46],
		[.key 80, .val 20],
		[.key 96, .val 37],
	],
	assert: find(m, 29) some: 2,
	assert: find(m, 63) some: 88,
	assert: find(m, 66) some: 7,
	assert: find(m, 73) some: 1,
	assert: find(m, 76) some: 57,
	assert: find(m, 77) some: 46,
	assert: find(m, 80) some: 20,
	assert: find(m, 96) some: 37,
}
test fuzz30 {
	m := (int, int) tree_map :: new(),
	m at: 55 put: 46,
	m at: 81 put: 65,
	check_invariants(m),
	assert: m elements: [
		[.key 55, .val 46],
		[.key 81, .val 65],
	],
	assert: find(m, 55) some: 46,
	assert: find(m, 81) some: 65,
}
test fuzz31 {
	m := (int, int) tree_map :: new(),
	m at: 10 put: 47,
	m at: 79 put: 63,
	m at: 93 put: 8,
	m at: 61 put: 84,
	m at: 5 put: 99,
	m at: 9 put: 78,
	m at: 67 put: 41,
	check_invariants(m),
	assert: m elements: [
		[.key 5, .val 99],
		[.key 9, .val 78],
		[.key 10, .val 47],
		[.key 61, .val 84],
		[.key 67, .val 41],
		[.key 79, .val 63],
		[.key 93, .val 8],
	],
	assert: find(m, 5) some: 99,
	assert: find(m, 9) some: 78,
	assert: find(m, 10) some: 47,
	assert: find(m, 61) some: 84,
	assert: find(m, 67) some: 41,
	assert: find(m, 79) some: 63,
	assert: find(m, 93) some: 8,
}
test fuzz32 {
	m := (int, int) tree_map :: new(),
	m at: 44 put: 57,
	check_invariants(m),
	assert: m elements: [
		[.key 44, .val 57],
	],
	assert: find(m, 44) some: 57,
}
test fuzz33 {
	m := (int, int) tree_map :: new(),
	m at: 70 put: 6,
	m at: 58 put: 28,
	m at: 49 put: 77,
	m at: 69 put: 40,
	m at: 55 put: 85,
	m at: 64 put: 18,
	m at: 74 put: 81,
	m at: 92 put: 66,
	check_invariants(m),
	assert: m elements: [
		[.key 49, .val 77],
		[.key 55, .val 85],
		[.key 58, .val 28],
		[.key 64, .val 18],
		[.key 69, .val 40],
		[.key 70, .val 6],
		[.key 74, .val 81],
		[.key 92, .val 66],
	],
	assert: find(m, 49) some: 77,
	assert: find(m, 55) some: 85,
	assert: find(m, 58) some: 28,
	assert: find(m, 64) some: 18,
	assert: find(m, 69) some: 40,
	assert: find(m, 70) some: 6,
	assert: find(m, 74) some: 81,
	assert: find(m, 92) some: 66,
}
test fuzz34 {
	m := (int, int) tree_map :: new(),
	m at: 7 put: 80,
	m at: 55 put: 40,
	m at: 3 put: 65,
	m at: 86 put: 21,
	m at: 33 put: 28,
	m at: 75 put: 45,
	m at: 11 put: 1,
	check_invariants(m),
	assert: m elements: [
		[.key 3, .val 65],
		[.key 7, .val 80],
		[.key 11, .val 1],
		[.key 33, .val 28],
		[.key 55, .val 40],
		[.key 75, .val 45],
		[.key 86, .val 21],
	],
	assert: find(m, 3) some: 65,
	assert: find(m, 7) some: 80,
	assert: find(m, 11) some: 1,
	assert: find(m, 33) some: 28,
	assert: find(m, 55) some: 40,
	assert: find(m, 75) some: 45,
	assert: find(m, 86) some: 21,
}
test fuzz35 {
	m := (int, int) tree_map :: new(),
	m at: 47 put: 83,
	m at: 25 put: 83,
	check_invariants(m),
	assert: m elements: [
		[.key 25, .val 83],
		[.key 47, .val 83],
	],
	assert: find(m, 25) some: 83,
	assert: find(m, 47) some: 83,
}
test fuzz36 {
	m := (int, int) tree_map :: new(),
	m at: 33 put: 52,
	m at: 61 put: 74,
	m at: 17 put: 57,
	m at: 75 put: 0,
	m at: 20 put: 20,
	m at: 19 put: 43,
	m at: 8 put: 5,
	m at: 41 put: 71,
	m at: 90 put: 36,
	m at: 35 put: 63,
	check_invariants(m),
	assert: m elements: [
		[.key 8, .val 5],
		[.key 17, .val 57],
		[.key 19, .val 43],
		[.key 20, .val 20],
		[.key 33, .val 52],
		[.key 35, .val 63],
		[.key 41, .val 71],
		[.key 61, .val 74],
		[.key 75, .val 0],
		[.key 90, .val 36],
	],
	assert: find(m, 8) some: 5,
	assert: find(m, 17) some: 57,
	assert: find(m, 19) some: 43,
	assert: find(m, 20) some: 20,
	assert: find(m, 33) some: 52,
	assert: find(m, 35) some: 63,
	assert: find(m, 41) some: 71,
	assert: find(m, 61) some: 74,
	assert: find(m, 75) some: 0,
	assert: find(m, 90) some: 36,
}
test fuzz37 {
	m := (int, int) tree_map :: new(),
	m at: 38 put: 88,
	check_invariants(m),
	assert: m elements: [
		[.key 38, .val 88],
	],
	assert: find(m, 38) some: 88,
}
test fuzz38 {
	m := (int, int) tree_map :: new(),
	m at: 98 put: 17,
	m at: 96 put: 72,
	check_invariants(m),
	assert: m elements: [
		[.key 96, .val 72],
		[.key 98, .val 17],
	],
	assert: find(m, 96) some: 72,
	assert: find(m, 98) some: 17,
}
test fuzz39 {
	m := (int, int) tree_map :: new(),
	m at: 84 put: 48,
	m at: 32 put: 81,
	check_invariants(m),
	assert: m elements: [
		[.key 32, .val 81],
		[.key 84, .val 48],
	],
	assert: find(m, 32) some: 81,
	assert: find(m, 84) some: 48,
}
test fuzz40 {
	m := (int, int) tree_map :: new(),
	m at: 52 put: 58,
	m at: 11 put: 95,
	m at: 50 put: 74,
	m at: 18 put: 22,
	m at: 87 put: 16,
	m at: 19 put: 81,
	m at: 17 put: 55,
	m at: 45 put: 66,
	m at: 65 put: 56,
	check_invariants(m),
	assert: m elements: [
		[.key 11, .val 95],
		[.key 17, .val 55],
		[.key 18, .val 22],
		[.key 19, .val 81],
		[.key 45, .val 66],
		[.key 50, .val 74],
		[.key 52, .val 58],
		[.key 65, .val 56],
		[.key 87, .val 16],
	],
	assert: find(m, 11) some: 95,
	assert: find(m, 17) some: 55,
	assert: find(m, 18) some: 22,
	assert: find(m, 19) some: 81,
	assert: find(m, 45) some: 66,
	assert: find(m, 50) some: 74,
	assert: find(m, 52) some: 58,
	assert: find(m, 65) some: 56,
	assert: find(m, 87) some: 16,
}
test fuzz41 {
	m := (int, int) tree_map :: new(),
	m at: 76 put: 56,
	m at: 77 put: 42,
	m at: 95 put: 29,
	m at: 34 put: 78,
	m at: 21 put: 41,
	m at: 9 put: 10,
	m at: 59 put: 4,
	check_invariants(m),
	assert: m elements: [
		[.key 9, .val 10],
		[.key 21, .val 41],
		[.key 34, .val 78],
		[.key 59, .val 4],
		[.key 76, .val 56],
		[.key 77, .val 42],
		[.key 95, .val 29],
	],
	assert: find(m, 9) some: 10,
	assert: find(m, 21) some: 41,
	assert: find(m, 34) some: 78,
	assert: find(m, 59) some: 4,
	assert: find(m, 76) some: 56,
	assert: find(m, 77) some: 42,
	assert: find(m, 95) some: 29,
}
test fuzz42 {
	m := (int, int) tree_map :: new(),
	m at: 41 put: 78,
	check_invariants(m),
	assert: m elements: [
		[.key 41, .val 78],
	],
	assert: find(m, 41) some: 78,
}
test fuzz43 {
	m := (int, int) tree_map :: new(),
	m at: 1 put: 8,
	m at: 74 put: 78,
	check_invariants(m),
	assert: m elements: [
		[.key 1, .val 8],
		[.key 74, .val 78],
	],
	assert: find(m, 1) some: 8,
	assert: find(m, 74) some: 78,
}
test fuzz44 {
	m := (int, int) tree_map :: new(),
	m at: 58 put: 95,
	m at: 8 put: 17,
	m at: 89 put: 43,
	m at: 94 put: 57,
	check_invariants(m),
	assert: m elements: [
		[.key 8, .val 17],
		[.key 58, .val 95],
		[.key 89, .val 43],
		[.key 94, .val 57],
	],
	assert: find(m, 8) some: 17,
	assert: find(m, 58) some: 95,
	assert: find(m, 89) some: 43,
	assert: find(m, 94) some: 57,
}
test fuzz45 {
	m := (int, int) tree_map :: new(),
	m at: 91 put: 41,
	m at: 36 put: 78,
	m at: 65 put: 61,
	m at: 2 put: 53,
	m at: 58 put: 18,
	m at: 94 put: 98,
	m at: 1 put: 48,
	check_invariants(m),
	assert: m elements: [
		[.key 1, .val 48],
		[.key 2, .val 53],
		[.key 36, .val 78],
		[.key 58, .val 18],
		[.key 65, .val 61],
		[.key 91, .val 41],
		[.key 94, .val 98],
	],
	assert: find(m, 1) some: 48,
	assert: find(m, 2) some: 53,
	assert: find(m, 36) some: 78,
	assert: find(m, 58) some: 18,
	assert: find(m, 65) some: 61,
	assert: find(m, 91) some: 41,
	assert: find(m, 94) some: 98,
}
test fuzz46 {
	m := (int, int) tree_map :: new(),
	m at: 60 put: 2,
	m at: 59 put: 99,
	m at: 5 put: 30,
	m at: 86 put: 53,
	m at: 55 put: 88,
	m at: 69 put: 22,
	m at: 65 put: 82,
	m at: 68 put: 80,
	m at: 59 put: 49,
	m at: 1 put: 24,
	check_invariants(m),
	assert: m elements: [
		[.key 1, .val 24],
		[.key 5, .val 30],
		[.key 55, .val 88],
		[.key 59, .val 49],
		[.key 60, .val 2],
		[.key 65, .val 82],
		[.key 68, .val 80],
		[.key 69, .val 22],
		[.key 86, .val 53],
	],
	assert: find(m, 1) some: 24,
	assert: find(m, 5) some: 30,
	assert: find(m, 55) some: 88,
	assert: find(m, 59) some: 49,
	assert: find(m, 60) some: 2,
	assert: find(m, 65) some: 82,
	assert: find(m, 68) some: 80,
	assert: find(m, 69) some: 22,
	assert: find(m, 86) some: 53,
}
test fuzz47 {
	m := (int, int) tree_map :: new(),
	m at: 88 put: 74,
	m at: 8 put: 96,
	m at: 57 put: 96,
	m at: 76 put: 85,
	m at: 77 put: 72,
	m at: 47 put: 46,
	m at: 77 put: 62,
	m at: 80 put: 7,
	m at: 14 put: 62,
	check_invariants(m),
	assert: m elements: [
		[.key 8, .val 96],
		[.key 14, .val 62],
		[.key 47, .val 46],
		[.key 57, .val 96],
		[.key 76, .val 85],
		[.key 77, .val 62],
		[.key 80, .val 7],
		[.key 88, .val 74],
	],
	assert: find(m, 8) some: 96,
	assert: find(m, 14) some: 62,
	assert: find(m, 47) some: 46,
	assert: find(m, 57) some: 96,
	assert: find(m, 76) some: 85,
	assert: find(m, 77) some: 62,
	assert: find(m, 80) some: 7,
	assert: find(m, 88) some: 74,
}
test fuzz48 {
	m := (int, int) tree_map :: new(),
	m at: 95 put: 0,
	m at: 92 put: 61,
	m at: 8 put: 55,
	m at: 34 put: 78,
	m at: 30 put: 49,
	m at: 20 put: 25,
	m at: 26 put: 0,
	m at: 86 put: 58,
	check_invariants(m),
	assert: m elements: [
		[.key 8, .val 55],
		[.key 20, .val 25],
		[.key 26, .val 0],
		[.key 30, .val 49],
		[.key 34, .val 78],
		[.key 86, .val 58],
		[.key 92, .val 61],
		[.key 95, .val 0],
	],
	assert: find(m, 8) some: 55,
	assert: find(m, 20) some: 25,
	assert: find(m, 26) some: 0,
	assert: find(m, 30) some: 49,
	assert: find(m, 34) some: 78,
	assert: find(m, 86) some: 58,
	assert: find(m, 92) some: 61,
	assert: find(m, 95) some: 0,
}
test fuzz49 {
	m := (int, int) tree_map :: new(),
	m at: 72 put: 58,
	m at: 14 put: 7,
	m at: 59 put: 1,
	check_invariants(m),
	assert: m elements: [
		[.key 14, .val 7],
		[.key 59, .val 1],
		[.key 72, .val 58],
	],
	assert: find(m, 14) some: 7,
	assert: find(m, 59) some: 1,
	assert: find(m, 72) some: 58,
}
