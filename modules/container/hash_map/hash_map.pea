Import "assert"
Import "basic"
Import "hash"
import "print"

// A map keyed on type K with values of type V,
// implemented as a hash table.
// Accessing an element by key (find, at:put:, and delete:)
// is expected constant time.
// Iteration with for:each: has a nondeterministic order,
// so order of iteration should not be dependend on.
Type (K, V) hash_map := (K, V) _hash_map
type (K, V) _hash_map &[
	.n int,
	.buckets [(K, V) bucket],
	.hash (K){uint64},
	.eq (K, K){bool},
]

type (K, V) bucket := [(K, V) entry option]

type (K, V) entry &[.k K, .v V]

// Returns a new, empty hash_map.
Func new() (K, V) hash_map : { hash(K)uint64, =(K, K)bool } {
	return: [.n 0, .buckets [[]], .hash hash, .eq (=)]
}

test new {
	m := (string, int) hash_map :: new(),
	assert: m.length equals: 0,
	assert_none: find(m, "hello")
}

// Returns the number of key/value bindings in the map.
Func .length(m (K, V) hash_map) int {
	return: m.n
}

// Returns the value for key k if any.
Func find(m (K, V) hash_map, k K) V option {
	h := m.hash(k),
	i := int :: h%(uint64 :: m.buckets.length),
	for: m.buckets[i] each_entry: (e){
		if: m.eq(e.k, k) then: {
			return: some(e.v)
		}
	},
	return: none()
}

// Sets v as the value for to k, returning the previous binding if any.
Func at:put:(m (K, V) hash_map, k K, v V) V option {
	h := m.hash(k),
	i := int :: h%(uint64 :: m.buckets.length),
	for: m.buckets[i] each_entry: (e){
		if: m.eq(e.k, k) then: {
			old := e.v,
			e.v := v,
			return: some(old)
		}
	},

	if: m.n*3 > m.buckets.length then: {
		grow(m),
		i := int :: h%(uint64 :: m.buckets.length)
	},
	++m.n,
	append(m.buckets[i], [.k k, .v v]),
	return: none()
}

func grow(m (K, V) hash_map) {
	len := 2*m.buckets.length,
	if: len < 4 then: {
		len := 4
	},
	buckets2 := [(K, V) bucket] :: new(len, (K, V) bucket :: []),
	for: m.buckets each: (b){
		for: b each_entry: (e){
			h := m.hash(e.k),
			i := int :: h%(uint64 :: len),
			append(buckets2[i], e)
		}
	},
	m.buckets := buckets2
}

func append(b &(K, V) bucket, e (K, V) entry) {
	for: 0 to: b.length - 1 do: (i){
		if: b[i] none: {
			b[i] := some(e),
			return()
		}
	},
	len := 2*b.length,
	if: len < 4 then: {
		len := 4
	},
	b2 := (K, V) bucket :: new(len, (K, V) entry option :: none()),
	for: 0 to: b.length - 1 do: (j){
		b2[j] := b[j]
	},
	b2[b.length] := some(e),
	b := b2
}

// Removes the value for key k, returning the previous binding if any.
Func delete:(m (K, V) hash_map, k K) V option {
	h := m.hash(k),
	i := int :: h%(uint64 :: m.buckets.length),
	b := m.buckets[i],
	for: 0 to: b.length - 1 do: (j){
		if: b[j] some: (e){
			if: m.eq(e.k, k) then: {
				--m.n,
				b[j] := none(),
				return: some(e.v)
			}
		}
	},
	return: none()
}

test put_find {
	m := (string, int) hash_map :: new(),
	m at: "Hello" put: 5,
	assert: find(m, "Hello") some: 5,
	assert: m.length equals: 1
}

test put_delete {
	m := (string, int) hash_map :: new(),
	m at: "Hello" put: 5,
	assert: (m delete: "Hello") some: 5,
	assert_none: find(m, "Hello"),
	assert: m.length equals: 0
}

test at_put_test0 {
	// Test regression where bad indexing created a -1 index.
	m := ([uint8], bool) hash_map :: new(),
	m at: [127, 0, 0, 1] put: true,
	m at: [0, 0, 0, 0, 0, 0, 0, 1] put: true
	// don't crash
}

// Calls f for each key/value binding in the map.
// The order in which f is called is nondeterministic.
Func for:each:(m (K, V) hash_map, f ([.key K, .val V]){}) {
	for: m.buckets each: (bucket){
		for: bucket each_entry: (e){
			f([.key e.k, .val e.v])
		}
	}
}

func for:each_entry:(b (K, V) bucket, f ((K, V) entry){}) {
	for: b each: (e){
		if: e some: f
	}
}
