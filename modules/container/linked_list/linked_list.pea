Import "assert"
Import "basic"
import "print"

// An ordered sequence of elements of type T.
// A linked_list is implemented as a circular, doubly-linked list.
// Insertion, removal, and access from the front and back are constant time.
//
// Linked lists can be iterated over using the cursor type.
// Cursors allow for constast time insertion before or after, and deletion of
// any item in the list, as long as there is a cursor to it.
Type T linked_list := T _linked_list
type T _linked_list &[
	.len int,
	.head T node option,
]

type T node &[
	.value T,
	.prev T node option,
	.next T node option,
]

func same_node(x T node option, y T node option) bool {
	x_addr := x some? (x T node) { uintref :: x } none? { 0 },
	y_addr := y some? (y T node) { uintref :: y } none? { 0 },
	return: x_addr = y_addr
}

// Returns a new empty linked_list.
Func new() T linked_list {
	return: [.len 0, .head none()],
}

test new {
	string_list := string linked_list :: new(),
	assert: string_list.length equals: 0,
}

// Returns the number of elements in the linked_list in constant time.
Func .length(l T linked_list) int {
	return: l.len
}

// Push adds and returns a new node.
// If the list was empty, it is the new head.
// Otherwise it is pushed before head, to the back.
func push(l T linked_list, t T) T node {
	n := T node :: [.value t, .prev none(), .next none()],
	if: l.head some: (h) {
		n.next := some(h),
		n.prev := h.prev,
		// If the node is in the list, it's prev and next are always non-none.
		h.prev some?(p T node) {p.next := some(n)} none? {panic("impossible")},
		h.prev := some(n),
	} none: {
		l.head := some(n),
		n.prev := some(n),
		n.next := some(n),
	},
	++l.len,
	return: n
}

// Inserts an element onto the front of the linked_list.
//
// This function operates in constant time.
Func push_front:(l T linked_list, t T) {
	l.head := some(push(l, t))
}

test push_front {
	l := string linked_list :: new(),
	assert: l elements: [string] :: [],
	assert: l.length equals: 0,

	l push_front: "c",
	assert: l elements: ["c"],
	assert: l.length equals: 1,

	l push_front: "b",
	assert: l elements: ["b", "c"],
	assert: l.length equals: 2,

	l push_front: "a",
	assert: l elements: ["a", "b", "c"],
	assert: l.length equals: 3,
}

// Inserts an element onto the back of the linked_list.
//
// This function operates in constant time.
Func push_back:(l T linked_list, t T) {
	push(l, t)
}

test push_back {
	l := string linked_list :: new(),
	assert: l elements: [string] :: [],
	assert: l.length equals: 0,

	l push_back: "a",
	assert: l elements: ["a"],
	assert: l.length equals: 1,

	l push_back: "b",
	assert: l elements: ["a", "b"],
	assert: l.length equals: 2,

	l push_back: "c",
	assert: l elements: ["a", "b", "c"],
	assert: l.length equals: 3,
}

func remove(l T linked_list, x T node) {
	if: same_node(some(x), l.head) then: {
		l.head := none(),
	} else: {
		x.next some? (n T node){n.prev := x.prev} none? {panic("impossible")},
		x.prev some? (p T node){p.next := x.next} none? {panic("impossible")},
	},
	--l.len,
	x.prev := none(),
	x.next := none(),
}

// Removes and returns the front element of the linked_list if any.
//
// This function operates in constant time.
Func pop_front(l T linked_list) T option {
	h :=  l.head some? (h T node) {
		h
	} none? {
		return: none()
	},
	l.head := h.next,
	remove(l, h),
	return: some(h.value)
}

test pop_front {
	l := string linked_list :: new(),
	l push_back: "a",
	l push_back: "b",
	l push_back: "c",
	l push_back: "d",
	assert: l.length equals: 4,
	assert: l elements: ["a", "b", "c", "d"],

	assert: pop_front(l) some: "a",
	assert: l.length equals: 3,
	assert: l elements: ["b", "c", "d"],

	assert: pop_front(l) some: "b",
	assert: l.length equals: 2,
	assert: l elements: ["c", "d"],

	assert: pop_front(l) some: "c",
	assert: l.length equals: 1,
	assert: l elements: [string] :: ["d"],

	assert: pop_front(l) some: "d",
	assert: l.length equals: 0,
	assert: l elements: [string] :: [],

	assert_none: pop_front(l),
	assert: l.length equals: 0,
	assert: l elements: [string] :: [],
}

// Removes and returns the back element of the linked_list if any.
//
// This function operates in constant time.
Func pop_back(l T linked_list) T option {
	h :=  l.head some? (h T node) {
		h
	} none? {
		return: none()
	},
	t := h.prev some? (t T node){t} none? {panic("impossible")},
	remove(l, t),
	return: some(t.value)
}

test pop_back {
	l := string linked_list :: new(),
	l push_back: "a",
	l push_back: "b",
	l push_back: "c",
	l push_back: "d",
	assert: l elements: ["a", "b", "c", "d"],
	assert: l.length equals: 4,

	assert: pop_back(l) some: "d",
	assert: l elements: ["a", "b", "c"],
	assert: l.length equals: 3,

	assert: pop_back(l) some: "c",
	assert: l elements: ["a", "b"],
	assert: l.length equals: 2,

	assert: pop_back(l) some: "b",
	assert: l elements: ["a"],
	assert: l.length equals: 1,

	assert: pop_back(l) some: "a",
	assert: l elements: [string] :: [],
	assert: l.length equals: 0,

	assert_none: pop_back(l),
	assert: l elements: [string] :: [],
	assert: l.length equals: 0,
}

// Calls for each element of the linked_list in order.
Func for:each:(l T linked_list, f (T){}) {
	cur := l.head,
	while: {cur} some: (n){
		f(n.value),
		if: same_node(n.next, l.head) then: {
			return()
		},
		cur := n.next
	}
}
