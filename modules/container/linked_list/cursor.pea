Import "assert"
Import "basic"
import "print"

// A cursor pointing to either an element of a linked_list
// or an "empty cursor" that points to no element.
// The empty cursor represents iteration beyond
// either end of the linked_list.
//
// Cursors allow for iterating over a linked list, forward or backwards.
// They also alllow constant-time access to,
// and insertion and removal before and after
// the element at the cursor.
Type T cursor := T _cursor
type T _cursor [
	.list T linked_list,
	.node T node option,
]

// Returns a reference to the value of the element at the cursor,
// or none if the cursor is empty.
Func .value(c T cursor) (&T) option {
	return: c.node some? (n){
		some(&T :: n.value)
	} none? {
		none()
	}
}

// Returns a cursor pointing to the front element of the linked_list,
// or the empty cursor if the linked_list is empty.
Func .front(l T linked_list) T cursor {
	return: T cursor :: [.list l, .node l.head]
}

test front {
	l := string linked_list :: new(),
	assert_none: l.front.value,
	l push_back: "Hello",
	assert: l.front.value some: "Hello",
	l push_back: "World",
	assert: l.front.value some: "Hello"
}

// Returns a cursor pointing to the back element of the linked_list,
// or the empty cursor if the linked_list is empty.
Func .back(l T linked_list) T cursor {
	return: l.head some? (h){
		t := h.prev some? (t){ t } none? { panic("impossible") },
		T cursor :: [.list l, .node some(t)]
	} none? {
		T cursor :: [.list l, .node none()]
	}
}

test back {
	l := string linked_list :: new(),
	assert_none: l.back.value,
	l push_back: "Hello",
	assert: l.back.value some: "Hello",
	l push_back: "World",
	assert: l.back.value some: "World"
}

// Advances the cursor to point to the next element of the linked_list.
// Advancing a cursor that points to the back element of the linked_list
// results in an empty cursor.
// Advancing an empty cursor makes the cursor point to
// the front element of the linked_list or remain empty if the list is empty.
Func advance:(c &T cursor) {
	if: c.node some: (n){
		if: same_node(n.next, c.list.head) then: {
			c.node := none()
		} else: {
			c.node := n.next
		}
	} none: {
		c := c.list.front
	}
}

test advance {
	l := string linked_list :: new(),

	cur := l.front,
	assert_none: cur.value,
	advance: cur,
	assert_none: cur.value,
	advance: cur,
	assert_none: cur.value,

	l push_back: "Hello",

	cur := l.front,
	assert: cur.value some: "Hello",
	advance: cur,
	assert_none: cur.value,
	advance: cur,
	assert: cur.value some: "Hello",

	l push_back: "World",

	cur := l.front,
	assert: cur.value some: "Hello",
	advance: cur,
	assert: cur.value some: "World",
	advance: cur,
	assert_none: cur.value,
	advance: cur,
	assert: cur.value some: "Hello",
	advance: cur,
	assert: cur.value some: "World",
	advance: cur,
	assert_none: cur.value,

	cur := l.back,
	assert: cur.value some: "World",
	advance: cur,
	assert_none: cur.value,
	advance: cur,
	assert: cur.value some: "Hello",
	advance: cur,
	assert: cur.value some: "World",
	advance: cur,
	assert_none: cur.value,
	advance: cur,
	assert: cur.value some: "Hello"
}

// Reverses the cursor to point to the preceding element of the linked_list.
// Reversing a cursor that points to the front element of the linked_list
// results in an empty cursor.
// Reversing an empty cursor makes the cursor point to
// the back element of the linked_list or remain empty if the list is empty.
Func reverse:(c &T cursor) {
	if: same_node(c.node, c.list.head) then: {
		c.node := none(),
		return()
	},
	if: c.node some: (n){
		c.node := n.prev
	} none: {
		c := c.list.back
	}
}

test reverse {
	l := string linked_list :: new(),

	cur := l.back,
	assert_none: cur.value,
	reverse: cur,
	assert_none: cur.value,
	reverse: cur,
	assert_none: cur.value,

	l push_back: "Hello",

	cur := l.back,
	assert: cur.value some: "Hello",
	reverse: cur,
	assert_none: cur.value,
	reverse: cur,
	assert: cur.value some: "Hello",

	l push_back: "World",

	cur := l.front,
	assert: cur.value some: "Hello",
	reverse: cur,
	assert_none: cur.value,
	reverse: cur,
	assert: cur.value some: "World",
	reverse: cur,
	assert: cur.value some: "Hello",
	reverse: cur,
	assert_none: cur.value,
	reverse: cur,
	assert: cur.value some: "World",

	cur := l.back,
	assert: cur.value some: "World",
	reverse: cur,
	assert: cur.value some: "Hello",
	reverse: cur,
	assert_none: cur.value,
	reverse: cur,
	assert: cur.value some: "World",
	reverse: cur,
	assert: cur.value some: "Hello",
	reverse: cur,
	assert_none: cur.value
}

test advance_and_reverse {
	l := string linked_list :: new(),

	cur := l.front,
	assert_none: cur.value,
	advance: cur,
	assert_none: cur.value,
	reverse: cur,
	assert_none: cur.value,

	l push_back: "Hello",

	cur := l.front,
	assert: cur.value some: "Hello",
	advance: cur,
	assert_none: cur.value,
	reverse: cur,
	assert: cur.value some: "Hello",

	l push_back: "World",

	cur := l.front,
	assert: cur.value some: "Hello",
	advance: cur,
	assert: cur.value some: "World",
	reverse: cur,
	assert: cur.value some: "Hello",

	cur := l.back,
	assert: cur.value some: "World",
	reverse: cur,
	assert: cur.value some: "Hello",
	advance: cur,
	assert: cur.value some: "World"
}

// Removes the element at the cursor from the linked_list and
// advances the cursor to point to the next element of the linked_list.
//
// If the cursor points to the back element of the linked_list
// the resulting cursor is the empty cursor.
//
// If the cursor is the empty cursor, nothing is removed
// and the resulting cursor points to the front element of the linked_list
// or remains empty if the list is empty.
Func remove_and_advance:(c &T cursor) {
	if: c.node none: {
		c := c.list.front
	} some: (n){
		if: same_node(n.next, c.list.head) then: {
			c.node := none()
		} else: {
			c.node := n.next
		},
		if: same_node(some(n), c.list.head) then: {
			c.list.head := c.node
		},
		remove(c.list, n)
	}
}

test remove_and_advance_empty_list {
	l := int linked_list :: new(),
	remove_and_advance: l.front,
	assert: l elements: [int] :: []
}

test remove_and_advance_empty_cursor {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	c := l.front,
	advance: c,
	advance: c,
	advance: c,
	assert_none: c.value,

	remove_and_advance: c,
	assert: c.value some: 1,
	assert: l elements: [1, 2, 3]
}

test remove_and_advance {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	c := l.front,
	advance: c,
	assert: c.value some: 2,

	remove_and_advance: c,
	assert: c.value some: 3,
	assert: l elements: [1, 3]
}

test remove_and_advance_front {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	c := l.front,
	assert: c.value some: 1,

	remove_and_advance: c,
	assert: c.value some: 2,
	assert: l elements: [2, 3]
}

test remove_and_advance_back {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	c := l.back,
	assert: c.value some: 3,

	remove_and_advance: c,
	assert_none: c.value,
	assert: l elements: [1, 2]
}

test remove_and_advance_last {
	l := int linked_list :: new(),
	l push_back: 1,
	c := l.front,
	assert: c.value some: 1,

	remove_and_advance: c,
	assert_none: c.value,
	assert: l elements: [int] :: []
}

// Removes the element at the cursor from the linked_list and
// reverses the cursor to point to the previous element of the linked_list.
//
// If the cursor points to the front element of the linked_list
// the resulting cursor is the empty cursor.
//
// If the cursor is the empty cursor, nothing is removed
// and the resulting cursor points to the back element of the linked_list
// or remains empty if the list is empty.
Func remove_and_reverse:(c &T cursor) {
	if: c.node none: {
		c := c.list.back
	} some: (n){
		if: same_node(some(n), c.list.head) then: {
			c.node := none(),
			c.list.head := n.next
		} else: {
			c.node := n.prev
		},
		remove(c.list, n)
	}
}

test remove_and_reverse_empty_list {
	l := int linked_list :: new(),
	remove_and_reverse: l.front,
	assert: l elements: [int] :: []
}

test remove_and_reverse_empty_cursor {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	c := l.front,
	reverse: c,
	assert_none: c.value,

	remove_and_reverse: c,
	assert: c.value some: 3,
	assert: l elements: [1, 2, 3]
}

test remove_and_reverse {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	c := l.front,
	advance: c,
	assert: c.value some: 2,

	remove_and_reverse: c,
	assert: c.value some: 1,
	assert: l elements: [1, 3]
}

test remove_and_reverse_front {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	c := l.front,
	assert: c.value some: 1,

	remove_and_reverse: c,
	assert_none: c.value,
	assert: l elements: [2, 3]
}

test remove_and_reverse_back {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	c := l.back,
	assert: c.value some: 3,

	remove_and_reverse: c,
	assert: c.value some: 2,
	assert: l elements: [1, 2]
}

test remove_and_reverse_last {
	l := int linked_list :: new(),
	l push_back: 1,
	c := l.front,
	assert: c.value some: 1,

	remove_and_reverse: c,
	assert_none: c.value,
	assert: l elements: [int] :: []
}

// Inserts t into the linked_list before the element pointed to be the cursor.
// If the cursor is the empty cursor then t is inserted at the back of the list.
Func before:insert:(c T cursor, t T) {
	n := c.node some? (n){ n } none? {
		c.list push_back: t,
		return()
	},
	m := T node :: [.value t, .prev n.prev, .next some(n)],
	n.prev some? (p){ p.next := some(m) } none? { panic("impossible") },
	n.prev := some(m),
	if: same_node(some(n), c.list.head) then: {
		c.list.head := some(m)
	},
	++c.list.len
}

test before_insert_empty_list {
	l := int linked_list :: new(),
	c := l.front,
	before: l.front insert: 1,
	assert: l elements: [1],
	assert: l.length equals: 1
}

test before_insert_front {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	before: l.front insert: 0,
	assert: l.length equals: 4,
	assert: l elements: [0, 1, 2, 3]
}

test before_insert {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	c := l.front,
	advance: c,
	assert: c.value some: 2,
	before: c insert: 0,
	assert: l.length equals: 4,
	assert: l elements: [1, 0, 2, 3]
}

test before_insert_back {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	before: l.back insert: 4,
	assert: l.length equals: 4,
	assert: l elements: [1, 2, 4, 3]
}

test before_insert_end {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	c := l.back,
	advance: c,
	assert_none: c.value,
	before: c insert: 4,
	assert: l.length equals: 4,
	assert: l elements: [1, 2, 3, 4]
}

// Inserts t into the linked_list after the element pointed to be the cursor.
// If the cursor is the empty cursor then t is inserted at the front of the list.
Func after:insert:(c T cursor, t T) {
	m := c.node some? (n){ n } none? {
		c.list push_front: t,
		return()
	},
	n := T node :: [.value t, .prev c.node, .next m.next],
	m.next some? (x){ x.prev := some(n) } none? { panic("impossible") },
	m.next := some(n),
	++c.list.len
}

test after_insert_empty_list {
	l := int linked_list :: new(),
	c := l.front,
	after: l.front insert: 1,
	assert: l.length equals: 1,
	assert: l elements: [1]
}

test after_insert_front {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	after: l.front insert: 0,
	assert: l.length equals: 4,
	assert: l elements: [1, 0, 2, 3]
}

test after_insert {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	c := l.front,
	advance: c,
	assert: c.value some: 2,
	after: c insert: 0,
	assert: l.length equals: 4,
	assert: l elements: [1, 2, 0, 3]
}

test after_insert_back {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	after: l.back insert: 4,
	assert: l.length equals: 4,
	assert: l elements: [1, 2, 3, 4]
}

test after_insert_end {
	l := int linked_list :: new(),
	l push_back: 1,
	l push_back: 2,
	l push_back: 3,
	c := l.back,
	advance: c,
	assert_none: c.value,
	after: c insert: 4,
	assert: l.length equals: 4,
	assert: l elements: [4, 1, 2, 3]
}
