// 5
func main() {
	foo(&[.x int] :: [.x 5])
}

func foo(s S) : bar(&S) {
	// When substituting &string for S, this becomes &&string.
	// While &&string itself is invalid, &S is ok even when S=&string,
	// becasue it behaves like a named type.
	bar(&S :: s)
}

type x_int_ref &[.x int]
func bar(x &x_int_ref) {
	print_int(x.x)
}

func print_int(_ int)

