import "print"

// Returns a new array of n elements with each initialized to f(i) for its index i.
Func new(n int, f (int){T}) [T] {
	if: n = 0 true: {
		return: []
	},
	a := new(n, f(0)),
	for: 1 to: n - 1 do: (i){
		a[i] := f(i)
	},
	return: a
}

test array_new_init {
	assert: [int] :: new(0, (i int){ i }) ordered: [],
	assert: [int] :: new(1, (i int){ i }) ordered: [0],
	assert: [int] :: new(5, (i int){ i }) ordered: [0, 1, 2, 3, 4],
	assert: [int] :: new(5, (i int){ i*2 }) ordered: [0, 2, 4, 6, 8],
	assert: [int] :: new(3, (_ int){ 8 }) ordered: [8, 8, 8]
}

// Returns whether a and b contain the same elements in the same order.
Func =(a, b [T] : { =(T, T)bool }) bool {
	if: a.length = b.length false: {
		return: false
	},
	for: 0 to: a.length - 1 do: (i){
		if: a[i] = b[i] false: {
			return: false
		}
	},
	return: true
}

test array_equal {
	assert: ([int] :: []) = [] eq: true,
	assert: [1] = [1] eq: true,
	assert: [1, 2] = [1, 2] eq: true,
	assert: [1, 2, 3] = [1, 2, 3] eq: true,

	assert: ([int] :: []) = [1] eq: false,
	assert: [1] = [] eq: false,
	assert: [1] = [1, 2] eq: false,
	assert: [1, 2] = [1] eq: false,
	assert: [1, 2] = [2, 1] eq: false,

	assert: ["hello", "world"] = ["hello", "world"] eq: true,
	assert: ["hello", "world"] = ["こんにちは", "皆さん"] eq: false
}

// Returns whether a is lexically less than, equal to, or greater than b.
Func <=>(a, b [T] : { <=>(T, T)O, O ordering }) ordering {
	for: 0 to: a.length - 1 do: (i){
		if: i < b.length false: {
			return: greater
		},
		if: a[i] < b[i] true: {
			return: less
		},
		if: a[i] > b[i] true: {
			return: greater
		}
	},
	return: a.length <=> b.length
}

test array_compare {
	assert: [int] :: [] cmp: [] is: equal,
	assert: [int] :: [] cmp: [1] is: less,
	assert: [1] cmp: [] is: greater,
	assert: [1, 2] cmp: [2, 2] is: less,
	assert: [1, 2] cmp: [1, 2] is: equal,
	assert: [1, 2] cmp: [0, 2] is: greater,
	assert: [1, 2] cmp: [1, 3] is: less,
	assert: [1, 2] cmp: [1, 2] is: equal,
	assert: [1, 2] cmp: [1, 1] is: greater,
	assert: [1, 2, 3] cmp: [1, 2, 4] is: less,
	assert: [1, 2, 3] cmp: [1, 2, 3] is: equal,
	assert: [1, 2, 3] cmp: [1, 2, 2] is: greater,
	assert: [2] cmp: [2, 1] is: less,
	assert: [2, 1] cmp: [2] is: greater,
	assert: [3] cmp: [2, 1] is: greater,
	assert: [2, 1] cmp: [3] is: less
}

// Calls f for each element of ts.
Func for:each:(ts [T], f (T){}) {
	for: 0 to: ts.length - 1 do: (i){
		f(ts[i])
	}
}

test array_for_each_empty {
	for: [int] :: [] each: (t){ print#panic("fail: " ++ t) }
}

test array_for_each {
	i := 0,
	for: [1, 2, 3] each: (t){
		assert: t eq: i + 1,
		i := i + 1
	},
	assert: i eq: 3
}

// Returns a new array containing the same elements as ts.
Func clone(ts [T]) [T] {
	return: new(ts.length, (i int){ ts[i] })
}

test clone {
	assert: clone([int] :: []) ordered: [],
	assert: clone([1]) ordered: [1],
	assert: clone([1, 2, 3]) ordered: [1, 2, 3],
	assert: clone(["hello", "world"]) ordered: ["hello", "world"],

	// Different array is returned.
	a := [1, 2, 3],
	assert: uintref :: (&int :: a[0]) ne: uintref :: (&int :: clone(a)[0])
}
